
atxmega-a4u-wakeup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  00000b22  00000bb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000bd  00802006  00802006  00000bbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003efe  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b5c  00000000  00000000  00004c32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d5f  00000000  00000000  0000778e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  000084f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023f9  00000000  00000000  00008854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aed  00000000  00000000  0000ac4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000b73a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_25>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__vector_28>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__vector_88>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 09 03 	jmp	0x612	; 0x612 <__vector_91>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a6 e0       	ldi	r26, 0x06	; 6
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a3 3c       	cpi	r26, 0xC3	; 195
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>

00000224 <__do_copy_data>:
 224:	10 e2       	ldi	r17, 0x20	; 32
 226:	a0 e0       	ldi	r26, 0x00	; 0
 228:	b0 e2       	ldi	r27, 0x20	; 32
 22a:	e2 e2       	ldi	r30, 0x22	; 34
 22c:	fb e0       	ldi	r31, 0x0B	; 11
 22e:	00 e0       	ldi	r16, 0x00	; 0
 230:	0b bf       	out	0x3b, r16	; 59
 232:	02 c0       	rjmp	.+4      	; 0x238 <__do_copy_data+0x14>
 234:	07 90       	elpm	r0, Z+
 236:	0d 92       	st	X+, r0
 238:	a6 30       	cpi	r26, 0x06	; 6
 23a:	b1 07       	cpc	r27, r17
 23c:	d9 f7       	brne	.-10     	; 0x234 <__do_copy_data+0x10>
 23e:	1b be       	out	0x3b, r1	; 59
 240:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <main>
 244:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <testpacket1>:

/*
turns on global interrupt control
*/
void interrupts(){
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	88 e0       	ldi	r24, 0x08	; 8
 256:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
 25a:	ce e5       	ldi	r28, 0x5E	; 94
 25c:	d0 e2       	ldi	r29, 0x20	; 32
 25e:	04 ea       	ldi	r16, 0xA4	; 164
 260:	10 e2       	ldi	r17, 0x20	; 32
 262:	69 91       	ld	r22, Y+
 264:	83 e4       	ldi	r24, 0x43	; 67
 266:	90 e2       	ldi	r25, 0x20	; 32
 268:	0e 94 37 04 	call	0x86e	; 0x86e <tp_write>
 26c:	c0 17       	cp	r28, r16
 26e:	d1 07       	cpc	r29, r17
 270:	c1 f7       	brne	.-16     	; 0x262 <testpacket1+0x16>
 272:	88 e0       	ldi	r24, 0x08	; 8
 274:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	08 95       	ret

00000282 <testpacket2>:
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	88 e0       	ldi	r24, 0x08	; 8
 28c:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
 290:	c6 e0       	ldi	r28, 0x06	; 6
 292:	d0 e2       	ldi	r29, 0x20	; 32
 294:	0d e0       	ldi	r16, 0x0D	; 13
 296:	10 e2       	ldi	r17, 0x20	; 32
 298:	69 91       	ld	r22, Y+
 29a:	83 e4       	ldi	r24, 0x43	; 67
 29c:	90 e2       	ldi	r25, 0x20	; 32
 29e:	0e 94 37 04 	call	0x86e	; 0x86e <tp_write>
 2a2:	c0 17       	cp	r28, r16
 2a4:	d1 07       	cpc	r29, r17
 2a6:	c1 f7       	brne	.-16     	; 0x298 <testpacket2+0x16>
 2a8:	88 e0       	ldi	r24, 0x08	; 8
 2aa:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	08 95       	ret

000002b8 <main>:
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	6c 97       	sbiw	r28, 0x1c	; 28
 2c2:	cd bf       	out	0x3d, r28	; 61
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	e0 e5       	ldi	r30, 0x50	; 80
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	88 e1       	ldi	r24, 0x18	; 24
 2cc:	85 83       	std	Z+5, r24	; 0x05
 2ce:	80 e1       	ldi	r24, 0x10	; 16
 2d0:	80 83       	st	Z, r24
 2d2:	81 81       	ldd	r24, Z+1	; 0x01
 2d4:	84 ff       	sbrs	r24, 4
 2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <main+0x1a>
 2d8:	88 ed       	ldi	r24, 0xD8	; 216
 2da:	84 bf       	out	0x34, r24	; 52
 2dc:	14 e0       	ldi	r17, 0x04	; 4
 2de:	10 93 40 00 	sts	0x0040, r17	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 2e2:	68 94       	set
 2e4:	ee 24       	eor	r14, r14
 2e6:	e4 f8       	bld	r14, 4
 2e8:	08 e0       	ldi	r16, 0x08	; 8
 2ea:	24 e0       	ldi	r18, 0x04	; 4
 2ec:	40 e4       	ldi	r20, 0x40	; 64
 2ee:	56 e0       	ldi	r21, 0x06	; 6
 2f0:	60 ea       	ldi	r22, 0xA0	; 160
 2f2:	78 e0       	ldi	r23, 0x08	; 8
 2f4:	ce 01       	movw	r24, r28
 2f6:	02 96       	adiw	r24, 0x02	; 2
 2f8:	0e 94 a4 03 	call	0x748	; 0x748 <tp_new>
 2fc:	8b e1       	ldi	r24, 0x1B	; 27
 2fe:	fe 01       	movw	r30, r28
 300:	32 96       	adiw	r30, 0x02	; 2
 302:	a8 e2       	ldi	r26, 0x28	; 40
 304:	b0 e2       	ldi	r27, 0x20	; 32
 306:	01 90       	ld	r0, Z+
 308:	0d 92       	st	X+, r0
 30a:	8a 95       	dec	r24
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x4e>
 30e:	88 e0       	ldi	r24, 0x08	; 8
 310:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
 314:	68 94       	set
 316:	ee 24       	eor	r14, r14
 318:	e5 f8       	bld	r14, 5
 31a:	00 e8       	ldi	r16, 0x80	; 128
 31c:	20 e4       	ldi	r18, 0x40	; 64
 31e:	40 e4       	ldi	r20, 0x40	; 64
 320:	56 e0       	ldi	r21, 0x06	; 6
 322:	60 eb       	ldi	r22, 0xB0	; 176
 324:	78 e0       	ldi	r23, 0x08	; 8
 326:	ce 01       	movw	r24, r28
 328:	02 96       	adiw	r24, 0x02	; 2
 32a:	0e 94 a4 03 	call	0x748	; 0x748 <tp_new>
 32e:	8b e1       	ldi	r24, 0x1B	; 27
 330:	fe 01       	movw	r30, r28
 332:	32 96       	adiw	r30, 0x02	; 2
 334:	ad e0       	ldi	r26, 0x0D	; 13
 336:	b0 e2       	ldi	r27, 0x20	; 32
 338:	01 90       	ld	r0, Z+
 33a:	0d 92       	st	X+, r0
 33c:	8a 95       	dec	r24
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x80>
 340:	8d e0       	ldi	r24, 0x0D	; 13
 342:	90 e2       	ldi	r25, 0x20	; 32
 344:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <tp_init>
 348:	68 94       	set
 34a:	ee 24       	eor	r14, r14
 34c:	e4 f8       	bld	r14, 4
 34e:	08 e0       	ldi	r16, 0x08	; 8
 350:	24 e0       	ldi	r18, 0x04	; 4
 352:	40 e6       	ldi	r20, 0x60	; 96
 354:	56 e0       	ldi	r21, 0x06	; 6
 356:	60 ea       	ldi	r22, 0xA0	; 160
 358:	79 e0       	ldi	r23, 0x09	; 9
 35a:	ce 01       	movw	r24, r28
 35c:	02 96       	adiw	r24, 0x02	; 2
 35e:	0e 94 a4 03 	call	0x748	; 0x748 <tp_new>
 362:	8b e1       	ldi	r24, 0x1B	; 27
 364:	fe 01       	movw	r30, r28
 366:	32 96       	adiw	r30, 0x02	; 2
 368:	a4 ea       	ldi	r26, 0xA4	; 164
 36a:	b0 e2       	ldi	r27, 0x20	; 32
 36c:	01 90       	ld	r0, Z+
 36e:	0d 92       	st	X+, r0
 370:	8a 95       	dec	r24
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0xb4>
 374:	84 ea       	ldi	r24, 0xA4	; 164
 376:	90 e2       	ldi	r25, 0x20	; 32
 378:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <tp_init>
 37c:	68 94       	set
 37e:	ee 24       	eor	r14, r14
 380:	e5 f8       	bld	r14, 5
 382:	00 e8       	ldi	r16, 0x80	; 128
 384:	20 e4       	ldi	r18, 0x40	; 64
 386:	40 e6       	ldi	r20, 0x60	; 96
 388:	56 e0       	ldi	r21, 0x06	; 6
 38a:	60 eb       	ldi	r22, 0xB0	; 176
 38c:	79 e0       	ldi	r23, 0x09	; 9
 38e:	ce 01       	movw	r24, r28
 390:	02 96       	adiw	r24, 0x02	; 2
 392:	0e 94 a4 03 	call	0x748	; 0x748 <tp_new>
 396:	8b e1       	ldi	r24, 0x1B	; 27
 398:	fe 01       	movw	r30, r28
 39a:	32 96       	adiw	r30, 0x02	; 2
 39c:	a3 e4       	ldi	r26, 0x43	; 67
 39e:	b0 e2       	ldi	r27, 0x20	; 32
 3a0:	01 90       	ld	r0, Z+
 3a2:	0d 92       	st	X+, r0
 3a4:	8a 95       	dec	r24
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <main+0xe8>
 3a8:	83 e4       	ldi	r24, 0x43	; 67
 3aa:	90 e2       	ldi	r25, 0x20	; 32
 3ac:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <tp_init>
 3b0:	e0 e6       	ldi	r30, 0x60	; 96
 3b2:	f6 e0       	ldi	r31, 0x06	; 6
 3b4:	92 e0       	ldi	r25, 0x02	; 2
 3b6:	92 83       	std	Z+2, r25	; 0x02
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	22 83       	std	Z+2, r18	; 0x02
 3bc:	88 e1       	ldi	r24, 0x18	; 24
 3be:	81 8b       	std	Z+17, r24	; 0x11
 3c0:	80 8b       	std	Z+16, r24	; 0x10
 3c2:	e0 ea       	ldi	r30, 0xA0	; 160
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	82 81       	ldd	r24, Z+2	; 0x02
 3c8:	87 60       	ori	r24, 0x07	; 7
 3ca:	82 83       	std	Z+2, r24	; 0x02
 3cc:	78 94       	sei
 3ce:	ee e5       	ldi	r30, 0x5E	; 94
 3d0:	f0 e2       	ldi	r31, 0x20	; 32
 3d2:	8e e7       	ldi	r24, 0x7E	; 126
 3d4:	80 83       	st	Z, r24
 3d6:	21 83       	std	Z+1, r18	; 0x01
 3d8:	92 83       	std	Z+2, r25	; 0x02
 3da:	13 83       	std	Z+3, r17	; 0x03
 3dc:	90 e4       	ldi	r25, 0x40	; 64
 3de:	94 83       	std	Z+4, r25	; 0x04
 3e0:	80 93 a3 20 	sts	0x20A3, r24	; 0x8020a3 <tpacket1+0x45>
 3e4:	e6 e0       	ldi	r30, 0x06	; 6
 3e6:	f0 e2       	ldi	r31, 0x20	; 32
 3e8:	80 83       	st	Z, r24
 3ea:	86 83       	std	Z+6, r24	; 0x06
 3ec:	0d e0       	ldi	r16, 0x0D	; 13
 3ee:	10 e2       	ldi	r17, 0x20	; 32
 3f0:	0f 2e       	mov	r0, r31
 3f2:	f0 e6       	ldi	r31, 0x60	; 96
 3f4:	ef 2e       	mov	r14, r31
 3f6:	f6 e0       	ldi	r31, 0x06	; 6
 3f8:	ff 2e       	mov	r15, r31
 3fa:	f0 2d       	mov	r31, r0
 3fc:	0f 2e       	mov	r0, r31
 3fe:	f0 e4       	ldi	r31, 0x40	; 64
 400:	cf 2e       	mov	r12, r31
 402:	f6 e0       	ldi	r31, 0x06	; 6
 404:	df 2e       	mov	r13, r31
 406:	f0 2d       	mov	r31, r0
 408:	68 94       	set
 40a:	bb 24       	eor	r11, r11
 40c:	b3 f8       	bld	r11, 3
 40e:	88 e2       	ldi	r24, 0x28	; 40
 410:	90 e2       	ldi	r25, 0x20	; 32
 412:	0e 94 3f 04 	call	0x87e	; 0x87e <tp_statflash>
 416:	f8 01       	movw	r30, r16
 418:	81 85       	ldd	r24, Z+9	; 0x09
 41a:	82 30       	cpi	r24, 0x02	; 2
 41c:	39 f5       	brne	.+78     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 41e:	84 ea       	ldi	r24, 0xA4	; 164
 420:	90 e2       	ldi	r25, 0x20	; 32
 422:	0e 94 48 04 	call	0x890	; 0x890 <tp_stathi>
 426:	f6 01       	movw	r30, r12
 428:	b5 82       	std	Z+5, r11	; 0x05
 42a:	6e e7       	ldi	r22, 0x7E	; 126
 42c:	83 e4       	ldi	r24, 0x43	; 67
 42e:	90 e2       	ldi	r25, 0x20	; 32
 430:	0e 94 37 04 	call	0x86e	; 0x86e <tp_write>
 434:	05 c0       	rjmp	.+10     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 436:	69 81       	ldd	r22, Y+1	; 0x01
 438:	83 e4       	ldi	r24, 0x43	; 67
 43a:	90 e2       	ldi	r25, 0x20	; 32
 43c:	0e 94 37 04 	call	0x86e	; 0x86e <tp_write>
 440:	be 01       	movw	r22, r28
 442:	6f 5f       	subi	r22, 0xFF	; 255
 444:	7f 4f       	sbci	r23, 0xFF	; 255
 446:	c8 01       	movw	r24, r16
 448:	0e 94 2e 04 	call	0x85c	; 0x85c <tp_read>
 44c:	81 11       	cpse	r24, r1
 44e:	f3 cf       	rjmp	.-26     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 450:	6e e7       	ldi	r22, 0x7E	; 126
 452:	83 e4       	ldi	r24, 0x43	; 67
 454:	90 e2       	ldi	r25, 0x20	; 32
 456:	0e 94 37 04 	call	0x86e	; 0x86e <tp_write>
 45a:	f6 01       	movw	r30, r12
 45c:	b6 82       	std	Z+6, r11	; 0x06
 45e:	84 ea       	ldi	r24, 0xA4	; 164
 460:	90 e2       	ldi	r25, 0x20	; 32
 462:	0e 94 51 04 	call	0x8a2	; 0x8a2 <tp_statlo>
 466:	f8 01       	movw	r30, r16
 468:	11 86       	std	Z+9, r1	; 0x09
 46a:	d1 cf       	rjmp	.-94     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 46c:	f7 01       	movw	r30, r14
 46e:	80 85       	ldd	r24, Z+8	; 0x08
 470:	81 fd       	sbrc	r24, 1
 472:	16 c0       	rjmp	.+44     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 474:	84 ea       	ldi	r24, 0xA4	; 164
 476:	90 e2       	ldi	r25, 0x20	; 32
 478:	0e 94 48 04 	call	0x890	; 0x890 <tp_stathi>
 47c:	83 e4       	ldi	r24, 0x43	; 67
 47e:	90 e2       	ldi	r25, 0x20	; 32
 480:	0e 94 26 01 	call	0x24c	; 0x24c <testpacket1>
 484:	84 ea       	ldi	r24, 0xA4	; 164
 486:	90 e2       	ldi	r25, 0x20	; 32
 488:	0e 94 51 04 	call	0x8a2	; 0x8a2 <tp_statlo>
 48c:	ff e7       	ldi	r31, 0x7F	; 127
 48e:	24 e8       	ldi	r18, 0x84	; 132
 490:	8e e1       	ldi	r24, 0x1E	; 30
 492:	f1 50       	subi	r31, 0x01	; 1
 494:	20 40       	sbci	r18, 0x00	; 0
 496:	80 40       	sbci	r24, 0x00	; 0
 498:	e1 f7       	brne	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 49c:	00 00       	nop
 49e:	b7 cf       	rjmp	.-146    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 4a0:	f7 01       	movw	r30, r14
 4a2:	80 85       	ldd	r24, Z+8	; 0x08
 4a4:	80 fd       	sbrc	r24, 0
 4a6:	b3 cf       	rjmp	.-154    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 4a8:	84 ea       	ldi	r24, 0xA4	; 164
 4aa:	90 e2       	ldi	r25, 0x20	; 32
 4ac:	0e 94 48 04 	call	0x890	; 0x890 <tp_stathi>
 4b0:	83 e4       	ldi	r24, 0x43	; 67
 4b2:	90 e2       	ldi	r25, 0x20	; 32
 4b4:	0e 94 41 01 	call	0x282	; 0x282 <testpacket2>
 4b8:	84 ea       	ldi	r24, 0xA4	; 164
 4ba:	90 e2       	ldi	r25, 0x20	; 32
 4bc:	0e 94 51 04 	call	0x8a2	; 0x8a2 <tp_statlo>
 4c0:	ff e7       	ldi	r31, 0x7F	; 127
 4c2:	24 e8       	ldi	r18, 0x84	; 132
 4c4:	8e e1       	ldi	r24, 0x1E	; 30
 4c6:	f1 50       	subi	r31, 0x01	; 1
 4c8:	20 40       	sbci	r18, 0x00	; 0
 4ca:	80 40       	sbci	r24, 0x00	; 0
 4cc:	e1 f7       	brne	.-8      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4d0:	00 00       	nop
 4d2:	9d cf       	rjmp	.-198    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

000004d4 <__vector_25>:
}

// hookup ISRs to port-abstracted interrupt functions

ISR(USARTC0_RXC_vect){
 4d4:	1f 92       	push	r1
 4d6:	0f 92       	push	r0
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	0f 92       	push	r0
 4dc:	11 24       	eor	r1, r1
 4de:	08 b6       	in	r0, 0x38	; 56
 4e0:	0f 92       	push	r0
 4e2:	18 be       	out	0x38, r1	; 56
 4e4:	09 b6       	in	r0, 0x39	; 57
 4e6:	0f 92       	push	r0
 4e8:	19 be       	out	0x39, r1	; 57
 4ea:	0b b6       	in	r0, 0x3b	; 59
 4ec:	0f 92       	push	r0
 4ee:	1b be       	out	0x3b, r1	; 59
 4f0:	2f 93       	push	r18
 4f2:	3f 93       	push	r19
 4f4:	4f 93       	push	r20
 4f6:	5f 93       	push	r21
 4f8:	6f 93       	push	r22
 4fa:	7f 93       	push	r23
 4fc:	8f 93       	push	r24
 4fe:	9f 93       	push	r25
 500:	af 93       	push	r26
 502:	bf 93       	push	r27
 504:	ef 93       	push	r30
 506:	ff 93       	push	r31
	tp_rxISR(&tp1);
 508:	88 e2       	ldi	r24, 0x28	; 40
 50a:	90 e2       	ldi	r25, 0x20	; 32
 50c:	0e 94 0f 04 	call	0x81e	; 0x81e <tp_rxISR>
}
 510:	ff 91       	pop	r31
 512:	ef 91       	pop	r30
 514:	bf 91       	pop	r27
 516:	af 91       	pop	r26
 518:	9f 91       	pop	r25
 51a:	8f 91       	pop	r24
 51c:	7f 91       	pop	r23
 51e:	6f 91       	pop	r22
 520:	5f 91       	pop	r21
 522:	4f 91       	pop	r20
 524:	3f 91       	pop	r19
 526:	2f 91       	pop	r18
 528:	0f 90       	pop	r0
 52a:	0b be       	out	0x3b, r0	; 59
 52c:	0f 90       	pop	r0
 52e:	09 be       	out	0x39, r0	; 57
 530:	0f 90       	pop	r0
 532:	08 be       	out	0x38, r0	; 56
 534:	0f 90       	pop	r0
 536:	0f be       	out	0x3f, r0	; 63
 538:	0f 90       	pop	r0
 53a:	1f 90       	pop	r1
 53c:	18 95       	reti

0000053e <__vector_28>:


ISR(USARTC1_RXC_vect){
 53e:	1f 92       	push	r1
 540:	0f 92       	push	r0
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	0f 92       	push	r0
 546:	11 24       	eor	r1, r1
 548:	08 b6       	in	r0, 0x38	; 56
 54a:	0f 92       	push	r0
 54c:	18 be       	out	0x38, r1	; 56
 54e:	09 b6       	in	r0, 0x39	; 57
 550:	0f 92       	push	r0
 552:	19 be       	out	0x39, r1	; 57
 554:	0b b6       	in	r0, 0x3b	; 59
 556:	0f 92       	push	r0
 558:	1b be       	out	0x3b, r1	; 59
 55a:	2f 93       	push	r18
 55c:	3f 93       	push	r19
 55e:	4f 93       	push	r20
 560:	5f 93       	push	r21
 562:	6f 93       	push	r22
 564:	7f 93       	push	r23
 566:	8f 93       	push	r24
 568:	9f 93       	push	r25
 56a:	af 93       	push	r26
 56c:	bf 93       	push	r27
 56e:	ef 93       	push	r30
 570:	ff 93       	push	r31
	tp_rxISR(&tp2);
 572:	8d e0       	ldi	r24, 0x0D	; 13
 574:	90 e2       	ldi	r25, 0x20	; 32
 576:	0e 94 0f 04 	call	0x81e	; 0x81e <tp_rxISR>
}
 57a:	ff 91       	pop	r31
 57c:	ef 91       	pop	r30
 57e:	bf 91       	pop	r27
 580:	af 91       	pop	r26
 582:	9f 91       	pop	r25
 584:	8f 91       	pop	r24
 586:	7f 91       	pop	r23
 588:	6f 91       	pop	r22
 58a:	5f 91       	pop	r21
 58c:	4f 91       	pop	r20
 58e:	3f 91       	pop	r19
 590:	2f 91       	pop	r18
 592:	0f 90       	pop	r0
 594:	0b be       	out	0x3b, r0	; 59
 596:	0f 90       	pop	r0
 598:	09 be       	out	0x39, r0	; 57
 59a:	0f 90       	pop	r0
 59c:	08 be       	out	0x38, r0	; 56
 59e:	0f 90       	pop	r0
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	0f 90       	pop	r0
 5a4:	1f 90       	pop	r1
 5a6:	18 95       	reti

000005a8 <__vector_88>:

ISR(USARTD0_RXC_vect){
 5a8:	1f 92       	push	r1
 5aa:	0f 92       	push	r0
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	0f 92       	push	r0
 5b0:	11 24       	eor	r1, r1
 5b2:	08 b6       	in	r0, 0x38	; 56
 5b4:	0f 92       	push	r0
 5b6:	18 be       	out	0x38, r1	; 56
 5b8:	09 b6       	in	r0, 0x39	; 57
 5ba:	0f 92       	push	r0
 5bc:	19 be       	out	0x39, r1	; 57
 5be:	0b b6       	in	r0, 0x3b	; 59
 5c0:	0f 92       	push	r0
 5c2:	1b be       	out	0x3b, r1	; 59
 5c4:	2f 93       	push	r18
 5c6:	3f 93       	push	r19
 5c8:	4f 93       	push	r20
 5ca:	5f 93       	push	r21
 5cc:	6f 93       	push	r22
 5ce:	7f 93       	push	r23
 5d0:	8f 93       	push	r24
 5d2:	9f 93       	push	r25
 5d4:	af 93       	push	r26
 5d6:	bf 93       	push	r27
 5d8:	ef 93       	push	r30
 5da:	ff 93       	push	r31
	tp_rxISR(&tp3);
 5dc:	84 ea       	ldi	r24, 0xA4	; 164
 5de:	90 e2       	ldi	r25, 0x20	; 32
 5e0:	0e 94 0f 04 	call	0x81e	; 0x81e <tp_rxISR>
}
 5e4:	ff 91       	pop	r31
 5e6:	ef 91       	pop	r30
 5e8:	bf 91       	pop	r27
 5ea:	af 91       	pop	r26
 5ec:	9f 91       	pop	r25
 5ee:	8f 91       	pop	r24
 5f0:	7f 91       	pop	r23
 5f2:	6f 91       	pop	r22
 5f4:	5f 91       	pop	r21
 5f6:	4f 91       	pop	r20
 5f8:	3f 91       	pop	r19
 5fa:	2f 91       	pop	r18
 5fc:	0f 90       	pop	r0
 5fe:	0b be       	out	0x3b, r0	; 59
 600:	0f 90       	pop	r0
 602:	09 be       	out	0x39, r0	; 57
 604:	0f 90       	pop	r0
 606:	08 be       	out	0x38, r0	; 56
 608:	0f 90       	pop	r0
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <__vector_91>:

ISR(USARTD1_RXC_vect){
 612:	1f 92       	push	r1
 614:	0f 92       	push	r0
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	0f 92       	push	r0
 61a:	11 24       	eor	r1, r1
 61c:	08 b6       	in	r0, 0x38	; 56
 61e:	0f 92       	push	r0
 620:	18 be       	out	0x38, r1	; 56
 622:	09 b6       	in	r0, 0x39	; 57
 624:	0f 92       	push	r0
 626:	19 be       	out	0x39, r1	; 57
 628:	0b b6       	in	r0, 0x3b	; 59
 62a:	0f 92       	push	r0
 62c:	1b be       	out	0x3b, r1	; 59
 62e:	2f 93       	push	r18
 630:	3f 93       	push	r19
 632:	4f 93       	push	r20
 634:	5f 93       	push	r21
 636:	6f 93       	push	r22
 638:	7f 93       	push	r23
 63a:	8f 93       	push	r24
 63c:	9f 93       	push	r25
 63e:	af 93       	push	r26
 640:	bf 93       	push	r27
 642:	ef 93       	push	r30
 644:	ff 93       	push	r31
	tp_rxISR(&tp4);
 646:	83 e4       	ldi	r24, 0x43	; 67
 648:	90 e2       	ldi	r25, 0x20	; 32
 64a:	0e 94 0f 04 	call	0x81e	; 0x81e <tp_rxISR>
}
 64e:	ff 91       	pop	r31
 650:	ef 91       	pop	r30
 652:	bf 91       	pop	r27
 654:	af 91       	pop	r26
 656:	9f 91       	pop	r25
 658:	8f 91       	pop	r24
 65a:	7f 91       	pop	r23
 65c:	6f 91       	pop	r22
 65e:	5f 91       	pop	r21
 660:	4f 91       	pop	r20
 662:	3f 91       	pop	r19
 664:	2f 91       	pop	r18
 666:	0f 90       	pop	r0
 668:	0b be       	out	0x3b, r0	; 59
 66a:	0f 90       	pop	r0
 66c:	09 be       	out	0x39, r0	; 57
 66e:	0f 90       	pop	r0
 670:	08 be       	out	0x38, r0	; 56
 672:	0f 90       	pop	r0
 674:	0f be       	out	0x3f, r0	; 63
 676:	0f 90       	pop	r0
 678:	1f 90       	pop	r1
 67a:	18 95       	reti

0000067c <rb_reset>:
	rb_reset(rb);
	return 1;
}

uint8_t rb_reset(ringbuffer_t *rb){
	if(rb){
 67c:	00 97       	sbiw	r24, 0x00	; 0
 67e:	39 f0       	breq	.+14     	; 0x68e <rb_reset+0x12>
		rb->head = 0;
 680:	fc 01       	movw	r30, r24
 682:	12 82       	std	Z+2, r1	; 0x02
 684:	13 82       	std	Z+3, r1	; 0x03
		rb->tail = 0;
 686:	14 82       	std	Z+4, r1	; 0x04
 688:	15 82       	std	Z+5, r1	; 0x05
		return 1;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	08 95       	ret
	} else {
		return 0;
 68e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 690:	08 95       	ret

00000692 <rb_init>:
#include "ringbuffer.h"
#include <stdlib.h>
#include <avr/io.h>

uint8_t rb_init(ringbuffer_t *rb, size_t size){
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	ec 01       	movw	r28, r24
 698:	cb 01       	movw	r24, r22
	rb->size = size;
 69a:	6e 83       	std	Y+6, r22	; 0x06
 69c:	7f 83       	std	Y+7, r23	; 0x07
	rb->buffer = malloc(rb->size);
 69e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <malloc>
 6a2:	88 83       	st	Y, r24
 6a4:	99 83       	std	Y+1, r25	; 0x01
	rb_reset(rb);
 6a6:	ce 01       	movw	r24, r28
 6a8:	0e 94 3e 03 	call	0x67c	; 0x67c <rb_reset>
	return 1;
}
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	08 95       	ret

000006b4 <rb_put>:
		return 0;
	}
}


uint8_t rb_put(ringbuffer_t *rb, uint8_t data){
 6b4:	fc 01       	movw	r30, r24
	if(rb){
 6b6:	89 2b       	or	r24, r25
 6b8:	f1 f0       	breq	.+60     	; 0x6f6 <rb_put+0x42>
		rb->buffer[rb->head] = data;
 6ba:	a0 81       	ld	r26, Z
 6bc:	b1 81       	ldd	r27, Z+1	; 0x01
 6be:	82 81       	ldd	r24, Z+2	; 0x02
 6c0:	93 81       	ldd	r25, Z+3	; 0x03
 6c2:	a8 0f       	add	r26, r24
 6c4:	b9 1f       	adc	r27, r25
 6c6:	6c 93       	st	X, r22
		rb->head = (rb->head + 1) % rb->size; // for wrap around
 6c8:	26 81       	ldd	r18, Z+6	; 0x06
 6ca:	37 81       	ldd	r19, Z+7	; 0x07
 6cc:	82 81       	ldd	r24, Z+2	; 0x02
 6ce:	93 81       	ldd	r25, Z+3	; 0x03
 6d0:	01 96       	adiw	r24, 0x01	; 1
 6d2:	b9 01       	movw	r22, r18
 6d4:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__udivmodhi4>
 6d8:	82 83       	std	Z+2, r24	; 0x02
 6da:	93 83       	std	Z+3, r25	; 0x03
		if(rb->head == rb->tail){
 6dc:	44 81       	ldd	r20, Z+4	; 0x04
 6de:	55 81       	ldd	r21, Z+5	; 0x05
 6e0:	84 17       	cp	r24, r20
 6e2:	95 07       	cpc	r25, r21
 6e4:	51 f4       	brne	.+20     	; 0x6fa <rb_put+0x46>
			rb->tail = (rb->tail + 1) % rb->size;
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	b9 01       	movw	r22, r18
 6ea:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__udivmodhi4>
 6ee:	84 83       	std	Z+4, r24	; 0x04
 6f0:	95 83       	std	Z+5, r25	; 0x05
		}
		return 1;
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	08 95       	ret
	} else {
		return 0;
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	08 95       	ret
		rb->buffer[rb->head] = data;
		rb->head = (rb->head + 1) % rb->size; // for wrap around
		if(rb->head == rb->tail){
			rb->tail = (rb->tail + 1) % rb->size;
		}
		return 1;
 6fa:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}
}
 6fc:	08 95       	ret

000006fe <rb_get>:

uint8_t rb_get(ringbuffer_t *rb, uint8_t *data){
 6fe:	fc 01       	movw	r30, r24
	if(rb && data && !rb_empty(*rb)){
 700:	89 2b       	or	r24, r25
 702:	e1 f0       	breq	.+56     	; 0x73c <rb_get+0x3e>
 704:	61 15       	cp	r22, r1
 706:	71 05       	cpc	r23, r1
 708:	d9 f0       	breq	.+54     	; 0x740 <rb_get+0x42>
 70a:	22 81       	ldd	r18, Z+2	; 0x02
 70c:	33 81       	ldd	r19, Z+3	; 0x03
 70e:	84 81       	ldd	r24, Z+4	; 0x04
 710:	95 81       	ldd	r25, Z+5	; 0x05
 712:	28 17       	cp	r18, r24
 714:	39 07       	cpc	r19, r25
 716:	b1 f0       	breq	.+44     	; 0x744 <rb_get+0x46>
		*data = rb->buffer[rb->tail];
 718:	a0 81       	ld	r26, Z
 71a:	b1 81       	ldd	r27, Z+1	; 0x01
 71c:	a8 0f       	add	r26, r24
 71e:	b9 1f       	adc	r27, r25
 720:	8c 91       	ld	r24, X
 722:	db 01       	movw	r26, r22
 724:	8c 93       	st	X, r24
		rb->tail = (rb->tail + 1) % rb->size;
 726:	84 81       	ldd	r24, Z+4	; 0x04
 728:	95 81       	ldd	r25, Z+5	; 0x05
 72a:	01 96       	adiw	r24, 0x01	; 1
 72c:	66 81       	ldd	r22, Z+6	; 0x06
 72e:	77 81       	ldd	r23, Z+7	; 0x07
 730:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__udivmodhi4>
 734:	84 83       	std	Z+4, r24	; 0x04
 736:	95 83       	std	Z+5, r25	; 0x05
		return 1;
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	08 95       	ret
	} else {
		return 0;
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	08 95       	ret
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	08 95       	ret
 744:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 746:	08 95       	ret

00000748 <tp_new>:
 */ 

#include "tinyport.h"
#include <util/delay.h>

tinyport_t tp_new(USART_t *uart, PORT_t *port, uint8_t pinRX_bm, uint8_t pinTX_bm, uint8_t pinSTAT_bm){
 748:	cf 92       	push	r12
 74a:	df 92       	push	r13
 74c:	ef 92       	push	r14
 74e:	0f 93       	push	r16
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	cd b7       	in	r28, 0x3d	; 61
 756:	de b7       	in	r29, 0x3e	; 62
 758:	6b 97       	sbiw	r28, 0x1b	; 27
 75a:	cd bf       	out	0x3d, r28	; 61
 75c:	de bf       	out	0x3e, r29	; 62
 75e:	6c 01       	movw	r12, r24
	
	tinyport_t tp;
	
	tp.uart = uart;
 760:	69 83       	std	Y+1, r22	; 0x01
 762:	7a 83       	std	Y+2, r23	; 0x02
	tp.port = port;
 764:	4b 83       	std	Y+3, r20	; 0x03
 766:	5c 83       	std	Y+4, r21	; 0x04
	
	tp.pinRX_bm = pinRX_bm;
 768:	2d 83       	std	Y+5, r18	; 0x05
	tp.pinTX_bm = pinTX_bm;
 76a:	0e 83       	std	Y+6, r16	; 0x06
	tp.pinSTAT_bm = pinSTAT_bm;
 76c:	ef 82       	std	Y+7, r14	; 0x07
	
	tp.txstate = TP_TX_STATE_EMPTY;
 76e:	18 86       	std	Y+8, r1	; 0x08
	tp.rxstate = TP_RX_STATE_EMPTY;
 770:	19 86       	std	Y+9, r1	; 0x09
	tp.pstate = TP_PSTATE_OUTSIDE;
 772:	1a 86       	std	Y+10, r1	; 0x0a
	
	rb_init(&tp.rbrx, TP_RXBUF_SIZE);
 774:	60 e8       	ldi	r22, 0x80	; 128
 776:	70 e0       	ldi	r23, 0x00	; 0
 778:	ce 01       	movw	r24, r28
 77a:	0c 96       	adiw	r24, 0x0c	; 12
 77c:	0e 94 49 03 	call	0x692	; 0x692 <rb_init>
	rb_init(&tp.rbtx, TP_TXBUF_SIZE);
 780:	60 e8       	ldi	r22, 0x80	; 128
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	ce 01       	movw	r24, r28
 786:	44 96       	adiw	r24, 0x14	; 20
 788:	0e 94 49 03 	call	0x692	; 0x692 <rb_init>
	
	return tp;
 78c:	8b e1       	ldi	r24, 0x1B	; 27
 78e:	fe 01       	movw	r30, r28
 790:	31 96       	adiw	r30, 0x01	; 1
 792:	d6 01       	movw	r26, r12
 794:	01 90       	ld	r0, Z+
 796:	0d 92       	st	X+, r0
 798:	8a 95       	dec	r24
 79a:	e1 f7       	brne	.-8      	; 0x794 <tp_new+0x4c>
}
 79c:	c6 01       	movw	r24, r12
 79e:	6b 96       	adiw	r28, 0x1b	; 27
 7a0:	cd bf       	out	0x3d, r28	; 61
 7a2:	de bf       	out	0x3e, r29	; 62
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	0f 91       	pop	r16
 7aa:	ef 90       	pop	r14
 7ac:	df 90       	pop	r13
 7ae:	cf 90       	pop	r12
 7b0:	08 95       	ret

000007b2 <tp_init>:

// mostly, start the uart port
void tp_init(tinyport_t *tp){
 7b2:	fc 01       	movw	r30, r24
	// USART is in UART (async) mode automatically
	// these registers setup the baudrate - the bitrate
	// this seems a bit tricky. I am taking for granted that the clock is at 48MHz,
	tp->uart->BAUDCTRLA = TP_UART_BAUDCONTROLA;
 7b4:	a0 81       	ld	r26, Z
 7b6:	b1 81       	ldd	r27, Z+1	; 0x01
 7b8:	82 e0       	ldi	r24, 0x02	; 2
 7ba:	16 96       	adiw	r26, 0x06	; 6
 7bc:	8c 93       	st	X, r24
	tp->uart->BAUDCTRLB = TP_UART_BAUDCONTROLB;
 7be:	a0 81       	ld	r26, Z
 7c0:	b1 81       	ldd	r27, Z+1	; 0x01
 7c2:	17 96       	adiw	r26, 0x07	; 7
 7c4:	1c 92       	st	X, r1
	
	// setup for interrupt
	// receive complete interrupt low level, transmit complete interupt off, transmit buffer empty interupt off
	tp->uart->CTRLA |= USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
 7c6:	a0 81       	ld	r26, Z
 7c8:	b1 81       	ldd	r27, Z+1	; 0x01
 7ca:	13 96       	adiw	r26, 0x03	; 3
 7cc:	8c 91       	ld	r24, X
 7ce:	13 97       	sbiw	r26, 0x03	; 3
 7d0:	80 61       	ori	r24, 0x10	; 16
 7d2:	13 96       	adiw	r26, 0x03	; 3
 7d4:	8c 93       	st	X, r24

	// enables tx and rx
	tp->uart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;
 7d6:	a0 81       	ld	r26, Z
 7d8:	b1 81       	ldd	r27, Z+1	; 0x01
 7da:	88 e1       	ldi	r24, 0x18	; 24
 7dc:	14 96       	adiw	r26, 0x04	; 4
 7de:	8c 93       	st	X, r24
	
	// setup mode
	tp->uart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc; // 8 bit word, async, no parity bit}
 7e0:	a0 81       	ld	r26, Z
 7e2:	b1 81       	ldd	r27, Z+1	; 0x01
 7e4:	83 e0       	ldi	r24, 0x03	; 3
 7e6:	15 96       	adiw	r26, 0x05	; 5
 7e8:	8c 93       	st	X, r24
	
	// some GPIO setup, to agree with the UART peripheral
	// tx pin (pin mapping is in the 'Datasheet', registers etc are in the 'Manual') these are default pins
	tp->port->OUTSET = tp->pinTX_bm;
 7ea:	a2 81       	ldd	r26, Z+2	; 0x02
 7ec:	b3 81       	ldd	r27, Z+3	; 0x03
 7ee:	85 81       	ldd	r24, Z+5	; 0x05
 7f0:	15 96       	adiw	r26, 0x05	; 5
 7f2:	8c 93       	st	X, r24
	tp->port->DIRSET = tp->pinTX_bm;
 7f4:	a2 81       	ldd	r26, Z+2	; 0x02
 7f6:	b3 81       	ldd	r27, Z+3	; 0x03
 7f8:	85 81       	ldd	r24, Z+5	; 0x05
 7fa:	11 96       	adiw	r26, 0x01	; 1
 7fc:	8c 93       	st	X, r24
	// rx pin
	tp->port->DIRCLR = tp->pinRX_bm;
 7fe:	a2 81       	ldd	r26, Z+2	; 0x02
 800:	b3 81       	ldd	r27, Z+3	; 0x03
 802:	84 81       	ldd	r24, Z+4	; 0x04
 804:	12 96       	adiw	r26, 0x02	; 2
 806:	8c 93       	st	X, r24
	tp->port->OUTCLR = tp->pinRX_bm;
 808:	a2 81       	ldd	r26, Z+2	; 0x02
 80a:	b3 81       	ldd	r27, Z+3	; 0x03
 80c:	84 81       	ldd	r24, Z+4	; 0x04
 80e:	16 96       	adiw	r26, 0x06	; 6
 810:	8c 93       	st	X, r24
	// stat pin
	tp->port->DIRSET = tp->pinSTAT_bm;
 812:	a2 81       	ldd	r26, Z+2	; 0x02
 814:	b3 81       	ldd	r27, Z+3	; 0x03
 816:	86 81       	ldd	r24, Z+6	; 0x06
 818:	11 96       	adiw	r26, 0x01	; 1
 81a:	8c 93       	st	X, r24
 81c:	08 95       	ret

0000081e <tp_rxISR>:
}

void tp_rxISR(tinyport_t *tp){ // towards a passalong
 81e:	fc 01       	movw	r30, r24
	while(!(tp->uart->STATUS & USART_DREIF_bm)); // while not ready, wait (needs work a better way)
	tp->uart->DATA = data;
}

void tp_statflash(tinyport_t *tp){
	tp->port->OUTTGL = tp->pinSTAT_bm;
 820:	a2 81       	ldd	r26, Z+2	; 0x02
 822:	b3 81       	ldd	r27, Z+3	; 0x03
 824:	86 81       	ldd	r24, Z+6	; 0x06
 826:	17 96       	adiw	r26, 0x07	; 7
 828:	8c 93       	st	X, r24
}

void tp_rxISR(tinyport_t *tp){ // towards a passalong
	tp_statflash(tp);
	
	tp->bumpdata = tp->uart->DATA;
 82a:	a0 81       	ld	r26, Z
 82c:	b1 81       	ldd	r27, Z+1	; 0x01
 82e:	6c 91       	ld	r22, X
 830:	62 87       	std	Z+10, r22	; 0x0a
	
	switch (tp->pstate){
 832:	81 85       	ldd	r24, Z+9	; 0x09
 834:	88 23       	and	r24, r24
 836:	19 f0       	breq	.+6      	; 0x83e <tp_rxISR+0x20>
 838:	81 30       	cpi	r24, 0x01	; 1
 83a:	31 f0       	breq	.+12     	; 0x848 <tp_rxISR+0x2a>
 83c:	08 95       	ret
		case TP_PSTATE_OUTSIDE:
			if(tp->bumpdata == 126){
 83e:	6e 37       	cpi	r22, 0x7E	; 126
 840:	61 f4       	brne	.+24     	; 0x85a <tp_rxISR+0x3c>
				tp->pstate = TP_PSTATE_INSIDE;
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	81 87       	std	Z+9, r24	; 0x09
 846:	08 95       	ret
			}
			break;
		case TP_PSTATE_INSIDE:
			if(tp->bumpdata == 126){
 848:	6e 37       	cpi	r22, 0x7E	; 126
 84a:	19 f4       	brne	.+6      	; 0x852 <tp_rxISR+0x34>
				tp->pstate = TP_PSTATE_HASPACKET;
 84c:	82 e0       	ldi	r24, 0x02	; 2
 84e:	81 87       	std	Z+9, r24	; 0x09
 850:	08 95       	ret
 852:	cf 01       	movw	r24, r30
			} else {
				rb_put(&tp->rbrx, tp->bumpdata);
 854:	0b 96       	adiw	r24, 0x0b	; 11
 856:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <rb_put>
 85a:	08 95       	ret

0000085c <tp_read>:
			break;	
	}
}

uint8_t tp_read(tinyport_t *tp, uint8_t *data){ // TODO: set at pointer, return true if non empty
	if(rb_get(&tp->rbrx, data)){
 85c:	0b 96       	adiw	r24, 0x0b	; 11
 85e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <rb_get>
 862:	91 e0       	ldi	r25, 0x01	; 1
 864:	81 11       	cpse	r24, r1
 866:	01 c0       	rjmp	.+2      	; 0x86a <tp_read+0xe>
 868:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	} else {
		return 0;
	}
}
 86a:	89 2f       	mov	r24, r25
 86c:	08 95       	ret

0000086e <tp_write>:

// https://lost-contact.mit.edu/afs/sur5r.net/service/drivers+doc/Atmel/ATXMEGA/AVR1307/code/doxygen/usart__driver_8c.html#7fdb922f6b858bef8515e23229efd970

void tp_write(tinyport_t *tp, uint8_t data){
	while(!(tp->uart->STATUS & USART_DREIF_bm)); // while not ready, wait (needs work a better way)
 86e:	dc 01       	movw	r26, r24
 870:	ed 91       	ld	r30, X+
 872:	fc 91       	ld	r31, X
 874:	81 81       	ldd	r24, Z+1	; 0x01
 876:	85 ff       	sbrs	r24, 5
 878:	fd cf       	rjmp	.-6      	; 0x874 <tp_write+0x6>
	tp->uart->DATA = data;
 87a:	60 83       	st	Z, r22
 87c:	08 95       	ret

0000087e <tp_statflash>:
}

void tp_statflash(tinyport_t *tp){
	tp->port->OUTTGL = tp->pinSTAT_bm;
 87e:	dc 01       	movw	r26, r24
 880:	12 96       	adiw	r26, 0x02	; 2
 882:	ed 91       	ld	r30, X+
 884:	fc 91       	ld	r31, X
 886:	13 97       	sbiw	r26, 0x03	; 3
 888:	16 96       	adiw	r26, 0x06	; 6
 88a:	8c 91       	ld	r24, X
 88c:	87 83       	std	Z+7, r24	; 0x07
 88e:	08 95       	ret

00000890 <tp_stathi>:
}

void tp_stathi(tinyport_t *tp){
	tp->port->OUTSET = tp->pinSTAT_bm;
 890:	dc 01       	movw	r26, r24
 892:	12 96       	adiw	r26, 0x02	; 2
 894:	ed 91       	ld	r30, X+
 896:	fc 91       	ld	r31, X
 898:	13 97       	sbiw	r26, 0x03	; 3
 89a:	16 96       	adiw	r26, 0x06	; 6
 89c:	8c 91       	ld	r24, X
 89e:	85 83       	std	Z+5, r24	; 0x05
 8a0:	08 95       	ret

000008a2 <tp_statlo>:
}

void tp_statlo(tinyport_t *tp){
	tp->port->OUTCLR = tp->pinSTAT_bm;
 8a2:	dc 01       	movw	r26, r24
 8a4:	12 96       	adiw	r26, 0x02	; 2
 8a6:	ed 91       	ld	r30, X+
 8a8:	fc 91       	ld	r31, X
 8aa:	13 97       	sbiw	r26, 0x03	; 3
 8ac:	16 96       	adiw	r26, 0x06	; 6
 8ae:	8c 91       	ld	r24, X
 8b0:	86 83       	std	Z+6, r24	; 0x06
 8b2:	08 95       	ret

000008b4 <__udivmodhi4>:
 8b4:	aa 1b       	sub	r26, r26
 8b6:	bb 1b       	sub	r27, r27
 8b8:	51 e1       	ldi	r21, 0x11	; 17
 8ba:	07 c0       	rjmp	.+14     	; 0x8ca <__udivmodhi4_ep>

000008bc <__udivmodhi4_loop>:
 8bc:	aa 1f       	adc	r26, r26
 8be:	bb 1f       	adc	r27, r27
 8c0:	a6 17       	cp	r26, r22
 8c2:	b7 07       	cpc	r27, r23
 8c4:	10 f0       	brcs	.+4      	; 0x8ca <__udivmodhi4_ep>
 8c6:	a6 1b       	sub	r26, r22
 8c8:	b7 0b       	sbc	r27, r23

000008ca <__udivmodhi4_ep>:
 8ca:	88 1f       	adc	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	5a 95       	dec	r21
 8d0:	a9 f7       	brne	.-22     	; 0x8bc <__udivmodhi4_loop>
 8d2:	80 95       	com	r24
 8d4:	90 95       	com	r25
 8d6:	bc 01       	movw	r22, r24
 8d8:	cd 01       	movw	r24, r26
 8da:	08 95       	ret

000008dc <malloc>:
 8dc:	0f 93       	push	r16
 8de:	1f 93       	push	r17
 8e0:	cf 93       	push	r28
 8e2:	df 93       	push	r29
 8e4:	82 30       	cpi	r24, 0x02	; 2
 8e6:	91 05       	cpc	r25, r1
 8e8:	10 f4       	brcc	.+4      	; 0x8ee <malloc+0x12>
 8ea:	82 e0       	ldi	r24, 0x02	; 2
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	e0 91 c1 20 	lds	r30, 0x20C1	; 0x8020c1 <__flp>
 8f2:	f0 91 c2 20 	lds	r31, 0x20C2	; 0x8020c2 <__flp+0x1>
 8f6:	20 e0       	ldi	r18, 0x00	; 0
 8f8:	30 e0       	ldi	r19, 0x00	; 0
 8fa:	a0 e0       	ldi	r26, 0x00	; 0
 8fc:	b0 e0       	ldi	r27, 0x00	; 0
 8fe:	30 97       	sbiw	r30, 0x00	; 0
 900:	19 f1       	breq	.+70     	; 0x948 <malloc+0x6c>
 902:	40 81       	ld	r20, Z
 904:	51 81       	ldd	r21, Z+1	; 0x01
 906:	02 81       	ldd	r16, Z+2	; 0x02
 908:	13 81       	ldd	r17, Z+3	; 0x03
 90a:	48 17       	cp	r20, r24
 90c:	59 07       	cpc	r21, r25
 90e:	c8 f0       	brcs	.+50     	; 0x942 <malloc+0x66>
 910:	84 17       	cp	r24, r20
 912:	95 07       	cpc	r25, r21
 914:	69 f4       	brne	.+26     	; 0x930 <malloc+0x54>
 916:	10 97       	sbiw	r26, 0x00	; 0
 918:	31 f0       	breq	.+12     	; 0x926 <malloc+0x4a>
 91a:	12 96       	adiw	r26, 0x02	; 2
 91c:	0c 93       	st	X, r16
 91e:	12 97       	sbiw	r26, 0x02	; 2
 920:	13 96       	adiw	r26, 0x03	; 3
 922:	1c 93       	st	X, r17
 924:	27 c0       	rjmp	.+78     	; 0x974 <malloc+0x98>
 926:	00 93 c1 20 	sts	0x20C1, r16	; 0x8020c1 <__flp>
 92a:	10 93 c2 20 	sts	0x20C2, r17	; 0x8020c2 <__flp+0x1>
 92e:	22 c0       	rjmp	.+68     	; 0x974 <malloc+0x98>
 930:	21 15       	cp	r18, r1
 932:	31 05       	cpc	r19, r1
 934:	19 f0       	breq	.+6      	; 0x93c <malloc+0x60>
 936:	42 17       	cp	r20, r18
 938:	53 07       	cpc	r21, r19
 93a:	18 f4       	brcc	.+6      	; 0x942 <malloc+0x66>
 93c:	9a 01       	movw	r18, r20
 93e:	bd 01       	movw	r22, r26
 940:	ef 01       	movw	r28, r30
 942:	df 01       	movw	r26, r30
 944:	f8 01       	movw	r30, r16
 946:	db cf       	rjmp	.-74     	; 0x8fe <malloc+0x22>
 948:	21 15       	cp	r18, r1
 94a:	31 05       	cpc	r19, r1
 94c:	f9 f0       	breq	.+62     	; 0x98c <malloc+0xb0>
 94e:	28 1b       	sub	r18, r24
 950:	39 0b       	sbc	r19, r25
 952:	24 30       	cpi	r18, 0x04	; 4
 954:	31 05       	cpc	r19, r1
 956:	80 f4       	brcc	.+32     	; 0x978 <malloc+0x9c>
 958:	8a 81       	ldd	r24, Y+2	; 0x02
 95a:	9b 81       	ldd	r25, Y+3	; 0x03
 95c:	61 15       	cp	r22, r1
 95e:	71 05       	cpc	r23, r1
 960:	21 f0       	breq	.+8      	; 0x96a <malloc+0x8e>
 962:	fb 01       	movw	r30, r22
 964:	82 83       	std	Z+2, r24	; 0x02
 966:	93 83       	std	Z+3, r25	; 0x03
 968:	04 c0       	rjmp	.+8      	; 0x972 <malloc+0x96>
 96a:	80 93 c1 20 	sts	0x20C1, r24	; 0x8020c1 <__flp>
 96e:	90 93 c2 20 	sts	0x20C2, r25	; 0x8020c2 <__flp+0x1>
 972:	fe 01       	movw	r30, r28
 974:	32 96       	adiw	r30, 0x02	; 2
 976:	44 c0       	rjmp	.+136    	; 0xa00 <malloc+0x124>
 978:	fe 01       	movw	r30, r28
 97a:	e2 0f       	add	r30, r18
 97c:	f3 1f       	adc	r31, r19
 97e:	81 93       	st	Z+, r24
 980:	91 93       	st	Z+, r25
 982:	22 50       	subi	r18, 0x02	; 2
 984:	31 09       	sbc	r19, r1
 986:	28 83       	st	Y, r18
 988:	39 83       	std	Y+1, r19	; 0x01
 98a:	3a c0       	rjmp	.+116    	; 0xa00 <malloc+0x124>
 98c:	20 91 bf 20 	lds	r18, 0x20BF	; 0x8020bf <__brkval>
 990:	30 91 c0 20 	lds	r19, 0x20C0	; 0x8020c0 <__brkval+0x1>
 994:	23 2b       	or	r18, r19
 996:	41 f4       	brne	.+16     	; 0x9a8 <malloc+0xcc>
 998:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
 99c:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
 9a0:	20 93 bf 20 	sts	0x20BF, r18	; 0x8020bf <__brkval>
 9a4:	30 93 c0 20 	sts	0x20C0, r19	; 0x8020c0 <__brkval+0x1>
 9a8:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
 9ac:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
 9b0:	21 15       	cp	r18, r1
 9b2:	31 05       	cpc	r19, r1
 9b4:	41 f4       	brne	.+16     	; 0x9c6 <malloc+0xea>
 9b6:	2d b7       	in	r18, 0x3d	; 61
 9b8:	3e b7       	in	r19, 0x3e	; 62
 9ba:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
 9be:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
 9c2:	24 1b       	sub	r18, r20
 9c4:	35 0b       	sbc	r19, r21
 9c6:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <__brkval>
 9ca:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <__brkval+0x1>
 9ce:	e2 17       	cp	r30, r18
 9d0:	f3 07       	cpc	r31, r19
 9d2:	a0 f4       	brcc	.+40     	; 0x9fc <malloc+0x120>
 9d4:	2e 1b       	sub	r18, r30
 9d6:	3f 0b       	sbc	r19, r31
 9d8:	28 17       	cp	r18, r24
 9da:	39 07       	cpc	r19, r25
 9dc:	78 f0       	brcs	.+30     	; 0x9fc <malloc+0x120>
 9de:	ac 01       	movw	r20, r24
 9e0:	4e 5f       	subi	r20, 0xFE	; 254
 9e2:	5f 4f       	sbci	r21, 0xFF	; 255
 9e4:	24 17       	cp	r18, r20
 9e6:	35 07       	cpc	r19, r21
 9e8:	48 f0       	brcs	.+18     	; 0x9fc <malloc+0x120>
 9ea:	4e 0f       	add	r20, r30
 9ec:	5f 1f       	adc	r21, r31
 9ee:	40 93 bf 20 	sts	0x20BF, r20	; 0x8020bf <__brkval>
 9f2:	50 93 c0 20 	sts	0x20C0, r21	; 0x8020c0 <__brkval+0x1>
 9f6:	81 93       	st	Z+, r24
 9f8:	91 93       	st	Z+, r25
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <malloc+0x124>
 9fc:	e0 e0       	ldi	r30, 0x00	; 0
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	cf 01       	movw	r24, r30
 a02:	df 91       	pop	r29
 a04:	cf 91       	pop	r28
 a06:	1f 91       	pop	r17
 a08:	0f 91       	pop	r16
 a0a:	08 95       	ret

00000a0c <free>:
 a0c:	cf 93       	push	r28
 a0e:	df 93       	push	r29
 a10:	00 97       	sbiw	r24, 0x00	; 0
 a12:	09 f4       	brne	.+2      	; 0xa16 <free+0xa>
 a14:	81 c0       	rjmp	.+258    	; 0xb18 <free+0x10c>
 a16:	fc 01       	movw	r30, r24
 a18:	32 97       	sbiw	r30, 0x02	; 2
 a1a:	12 82       	std	Z+2, r1	; 0x02
 a1c:	13 82       	std	Z+3, r1	; 0x03
 a1e:	a0 91 c1 20 	lds	r26, 0x20C1	; 0x8020c1 <__flp>
 a22:	b0 91 c2 20 	lds	r27, 0x20C2	; 0x8020c2 <__flp+0x1>
 a26:	10 97       	sbiw	r26, 0x00	; 0
 a28:	81 f4       	brne	.+32     	; 0xa4a <free+0x3e>
 a2a:	20 81       	ld	r18, Z
 a2c:	31 81       	ldd	r19, Z+1	; 0x01
 a2e:	82 0f       	add	r24, r18
 a30:	93 1f       	adc	r25, r19
 a32:	20 91 bf 20 	lds	r18, 0x20BF	; 0x8020bf <__brkval>
 a36:	30 91 c0 20 	lds	r19, 0x20C0	; 0x8020c0 <__brkval+0x1>
 a3a:	28 17       	cp	r18, r24
 a3c:	39 07       	cpc	r19, r25
 a3e:	51 f5       	brne	.+84     	; 0xa94 <free+0x88>
 a40:	e0 93 bf 20 	sts	0x20BF, r30	; 0x8020bf <__brkval>
 a44:	f0 93 c0 20 	sts	0x20C0, r31	; 0x8020c0 <__brkval+0x1>
 a48:	67 c0       	rjmp	.+206    	; 0xb18 <free+0x10c>
 a4a:	ed 01       	movw	r28, r26
 a4c:	20 e0       	ldi	r18, 0x00	; 0
 a4e:	30 e0       	ldi	r19, 0x00	; 0
 a50:	ce 17       	cp	r28, r30
 a52:	df 07       	cpc	r29, r31
 a54:	40 f4       	brcc	.+16     	; 0xa66 <free+0x5a>
 a56:	4a 81       	ldd	r20, Y+2	; 0x02
 a58:	5b 81       	ldd	r21, Y+3	; 0x03
 a5a:	9e 01       	movw	r18, r28
 a5c:	41 15       	cp	r20, r1
 a5e:	51 05       	cpc	r21, r1
 a60:	f1 f0       	breq	.+60     	; 0xa9e <free+0x92>
 a62:	ea 01       	movw	r28, r20
 a64:	f5 cf       	rjmp	.-22     	; 0xa50 <free+0x44>
 a66:	c2 83       	std	Z+2, r28	; 0x02
 a68:	d3 83       	std	Z+3, r29	; 0x03
 a6a:	40 81       	ld	r20, Z
 a6c:	51 81       	ldd	r21, Z+1	; 0x01
 a6e:	84 0f       	add	r24, r20
 a70:	95 1f       	adc	r25, r21
 a72:	c8 17       	cp	r28, r24
 a74:	d9 07       	cpc	r29, r25
 a76:	59 f4       	brne	.+22     	; 0xa8e <free+0x82>
 a78:	88 81       	ld	r24, Y
 a7a:	99 81       	ldd	r25, Y+1	; 0x01
 a7c:	84 0f       	add	r24, r20
 a7e:	95 1f       	adc	r25, r21
 a80:	02 96       	adiw	r24, 0x02	; 2
 a82:	80 83       	st	Z, r24
 a84:	91 83       	std	Z+1, r25	; 0x01
 a86:	8a 81       	ldd	r24, Y+2	; 0x02
 a88:	9b 81       	ldd	r25, Y+3	; 0x03
 a8a:	82 83       	std	Z+2, r24	; 0x02
 a8c:	93 83       	std	Z+3, r25	; 0x03
 a8e:	21 15       	cp	r18, r1
 a90:	31 05       	cpc	r19, r1
 a92:	29 f4       	brne	.+10     	; 0xa9e <free+0x92>
 a94:	e0 93 c1 20 	sts	0x20C1, r30	; 0x8020c1 <__flp>
 a98:	f0 93 c2 20 	sts	0x20C2, r31	; 0x8020c2 <__flp+0x1>
 a9c:	3d c0       	rjmp	.+122    	; 0xb18 <free+0x10c>
 a9e:	e9 01       	movw	r28, r18
 aa0:	ea 83       	std	Y+2, r30	; 0x02
 aa2:	fb 83       	std	Y+3, r31	; 0x03
 aa4:	49 91       	ld	r20, Y+
 aa6:	59 91       	ld	r21, Y+
 aa8:	c4 0f       	add	r28, r20
 aaa:	d5 1f       	adc	r29, r21
 aac:	ec 17       	cp	r30, r28
 aae:	fd 07       	cpc	r31, r29
 ab0:	61 f4       	brne	.+24     	; 0xaca <free+0xbe>
 ab2:	80 81       	ld	r24, Z
 ab4:	91 81       	ldd	r25, Z+1	; 0x01
 ab6:	84 0f       	add	r24, r20
 ab8:	95 1f       	adc	r25, r21
 aba:	02 96       	adiw	r24, 0x02	; 2
 abc:	e9 01       	movw	r28, r18
 abe:	88 83       	st	Y, r24
 ac0:	99 83       	std	Y+1, r25	; 0x01
 ac2:	82 81       	ldd	r24, Z+2	; 0x02
 ac4:	93 81       	ldd	r25, Z+3	; 0x03
 ac6:	8a 83       	std	Y+2, r24	; 0x02
 ac8:	9b 83       	std	Y+3, r25	; 0x03
 aca:	e0 e0       	ldi	r30, 0x00	; 0
 acc:	f0 e0       	ldi	r31, 0x00	; 0
 ace:	12 96       	adiw	r26, 0x02	; 2
 ad0:	8d 91       	ld	r24, X+
 ad2:	9c 91       	ld	r25, X
 ad4:	13 97       	sbiw	r26, 0x03	; 3
 ad6:	00 97       	sbiw	r24, 0x00	; 0
 ad8:	19 f0       	breq	.+6      	; 0xae0 <free+0xd4>
 ada:	fd 01       	movw	r30, r26
 adc:	dc 01       	movw	r26, r24
 ade:	f7 cf       	rjmp	.-18     	; 0xace <free+0xc2>
 ae0:	8d 91       	ld	r24, X+
 ae2:	9c 91       	ld	r25, X
 ae4:	11 97       	sbiw	r26, 0x01	; 1
 ae6:	9d 01       	movw	r18, r26
 ae8:	2e 5f       	subi	r18, 0xFE	; 254
 aea:	3f 4f       	sbci	r19, 0xFF	; 255
 aec:	82 0f       	add	r24, r18
 aee:	93 1f       	adc	r25, r19
 af0:	20 91 bf 20 	lds	r18, 0x20BF	; 0x8020bf <__brkval>
 af4:	30 91 c0 20 	lds	r19, 0x20C0	; 0x8020c0 <__brkval+0x1>
 af8:	28 17       	cp	r18, r24
 afa:	39 07       	cpc	r19, r25
 afc:	69 f4       	brne	.+26     	; 0xb18 <free+0x10c>
 afe:	30 97       	sbiw	r30, 0x00	; 0
 b00:	29 f4       	brne	.+10     	; 0xb0c <free+0x100>
 b02:	10 92 c1 20 	sts	0x20C1, r1	; 0x8020c1 <__flp>
 b06:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <__flp+0x1>
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <free+0x104>
 b0c:	12 82       	std	Z+2, r1	; 0x02
 b0e:	13 82       	std	Z+3, r1	; 0x03
 b10:	a0 93 bf 20 	sts	0x20BF, r26	; 0x8020bf <__brkval>
 b14:	b0 93 c0 20 	sts	0x20C0, r27	; 0x8020c0 <__brkval+0x1>
 b18:	df 91       	pop	r29
 b1a:	cf 91       	pop	r28
 b1c:	08 95       	ret

00000b1e <_exit>:
 b1e:	f8 94       	cli

00000b20 <__stop_program>:
 b20:	ff cf       	rjmp	.-2      	; 0xb20 <__stop_program>
