
atxmega-a4u-wakeup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  000009a8  00000a3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000070  00802006  00802006  00000a42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c5f  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002add  00000000  00000000  00004813  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd5  00000000  00000000  000072f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00007ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022f6  00000000  00000000  000081f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092b  00000000  00000000  0000a4ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000ae15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 c0 01 	jmp	0x380	; 0x380 <__vector_25>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_28>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_88>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_91>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e8 ea       	ldi	r30, 0xA8	; 168
 21c:	f9 e0       	ldi	r31, 0x09	; 9
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a6 30       	cpi	r26, 0x06	; 6
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a6 e0       	ldi	r26, 0x06	; 6
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a6 37       	cpi	r26, 0x76	; 118
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 26 01 	call	0x24c	; 0x24c <main>
 244:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <main>:

/*
turns on global interrupt control
*/
void interrupts(){
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	6c 97       	sbiw	r28, 0x1c	; 28
 256:	cd bf       	out	0x3d, r28	; 61
 258:	de bf       	out	0x3e, r29	; 62
 25a:	e0 e5       	ldi	r30, 0x50	; 80
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	88 e1       	ldi	r24, 0x18	; 24
 260:	85 83       	std	Z+5, r24	; 0x05
 262:	80 e1       	ldi	r24, 0x10	; 16
 264:	80 83       	st	Z, r24
 266:	81 81       	ldd	r24, Z+1	; 0x01
 268:	84 ff       	sbrs	r24, 4
 26a:	fd cf       	rjmp	.-6      	; 0x266 <main+0x1a>
 26c:	88 ed       	ldi	r24, 0xD8	; 216
 26e:	84 bf       	out	0x34, r24	; 52
 270:	84 e0       	ldi	r24, 0x04	; 4
 272:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 276:	68 94       	set
 278:	ee 24       	eor	r14, r14
 27a:	e4 f8       	bld	r14, 4
 27c:	08 e0       	ldi	r16, 0x08	; 8
 27e:	24 e0       	ldi	r18, 0x04	; 4
 280:	40 e4       	ldi	r20, 0x40	; 64
 282:	56 e0       	ldi	r21, 0x06	; 6
 284:	60 ea       	ldi	r22, 0xA0	; 160
 286:	78 e0       	ldi	r23, 0x08	; 8
 288:	ce 01       	movw	r24, r28
 28a:	02 96       	adiw	r24, 0x02	; 2
 28c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <tp_new>
 290:	8b e1       	ldi	r24, 0x1B	; 27
 292:	fe 01       	movw	r30, r28
 294:	32 96       	adiw	r30, 0x02	; 2
 296:	a1 e2       	ldi	r26, 0x21	; 33
 298:	b0 e2       	ldi	r27, 0x20	; 32
 29a:	01 90       	ld	r0, Z+
 29c:	0d 92       	st	X+, r0
 29e:	8a 95       	dec	r24
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x4e>
 2a2:	81 e2       	ldi	r24, 0x21	; 33
 2a4:	90 e2       	ldi	r25, 0x20	; 32
 2a6:	0e 94 2f 03 	call	0x65e	; 0x65e <tp_init>
 2aa:	68 94       	set
 2ac:	ee 24       	eor	r14, r14
 2ae:	e5 f8       	bld	r14, 5
 2b0:	00 e8       	ldi	r16, 0x80	; 128
 2b2:	20 e4       	ldi	r18, 0x40	; 64
 2b4:	40 e4       	ldi	r20, 0x40	; 64
 2b6:	56 e0       	ldi	r21, 0x06	; 6
 2b8:	60 eb       	ldi	r22, 0xB0	; 176
 2ba:	78 e0       	ldi	r23, 0x08	; 8
 2bc:	ce 01       	movw	r24, r28
 2be:	02 96       	adiw	r24, 0x02	; 2
 2c0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <tp_new>
 2c4:	8b e1       	ldi	r24, 0x1B	; 27
 2c6:	fe 01       	movw	r30, r28
 2c8:	32 96       	adiw	r30, 0x02	; 2
 2ca:	a6 e0       	ldi	r26, 0x06	; 6
 2cc:	b0 e2       	ldi	r27, 0x20	; 32
 2ce:	01 90       	ld	r0, Z+
 2d0:	0d 92       	st	X+, r0
 2d2:	8a 95       	dec	r24
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <main+0x82>
 2d6:	86 e0       	ldi	r24, 0x06	; 6
 2d8:	90 e2       	ldi	r25, 0x20	; 32
 2da:	0e 94 2f 03 	call	0x65e	; 0x65e <tp_init>
 2de:	68 94       	set
 2e0:	ee 24       	eor	r14, r14
 2e2:	e4 f8       	bld	r14, 4
 2e4:	08 e0       	ldi	r16, 0x08	; 8
 2e6:	24 e0       	ldi	r18, 0x04	; 4
 2e8:	40 e6       	ldi	r20, 0x60	; 96
 2ea:	56 e0       	ldi	r21, 0x06	; 6
 2ec:	60 ea       	ldi	r22, 0xA0	; 160
 2ee:	79 e0       	ldi	r23, 0x09	; 9
 2f0:	ce 01       	movw	r24, r28
 2f2:	02 96       	adiw	r24, 0x02	; 2
 2f4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <tp_new>
 2f8:	8b e1       	ldi	r24, 0x1B	; 27
 2fa:	fe 01       	movw	r30, r28
 2fc:	32 96       	adiw	r30, 0x02	; 2
 2fe:	a7 e5       	ldi	r26, 0x57	; 87
 300:	b0 e2       	ldi	r27, 0x20	; 32
 302:	01 90       	ld	r0, Z+
 304:	0d 92       	st	X+, r0
 306:	8a 95       	dec	r24
 308:	e1 f7       	brne	.-8      	; 0x302 <main+0xb6>
 30a:	87 e5       	ldi	r24, 0x57	; 87
 30c:	90 e2       	ldi	r25, 0x20	; 32
 30e:	0e 94 2f 03 	call	0x65e	; 0x65e <tp_init>
 312:	68 94       	set
 314:	ee 24       	eor	r14, r14
 316:	e5 f8       	bld	r14, 5
 318:	00 e8       	ldi	r16, 0x80	; 128
 31a:	20 e4       	ldi	r18, 0x40	; 64
 31c:	40 e6       	ldi	r20, 0x60	; 96
 31e:	56 e0       	ldi	r21, 0x06	; 6
 320:	60 eb       	ldi	r22, 0xB0	; 176
 322:	79 e0       	ldi	r23, 0x09	; 9
 324:	ce 01       	movw	r24, r28
 326:	02 96       	adiw	r24, 0x02	; 2
 328:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <tp_new>
 32c:	8b e1       	ldi	r24, 0x1B	; 27
 32e:	fe 01       	movw	r30, r28
 330:	32 96       	adiw	r30, 0x02	; 2
 332:	ac e3       	ldi	r26, 0x3C	; 60
 334:	b0 e2       	ldi	r27, 0x20	; 32
 336:	01 90       	ld	r0, Z+
 338:	0d 92       	st	X+, r0
 33a:	8a 95       	dec	r24
 33c:	e1 f7       	brne	.-8      	; 0x336 <main+0xea>
 33e:	8c e3       	ldi	r24, 0x3C	; 60
 340:	90 e2       	ldi	r25, 0x20	; 32
 342:	0e 94 2f 03 	call	0x65e	; 0x65e <tp_init>
 346:	e0 ea       	ldi	r30, 0xA0	; 160
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	82 81       	ldd	r24, Z+2	; 0x02
 34c:	87 60       	ori	r24, 0x07	; 7
 34e:	82 83       	std	Z+2, r24	; 0x02
 350:	78 94       	sei
 352:	81 e2       	ldi	r24, 0x21	; 33
 354:	90 e2       	ldi	r25, 0x20	; 32
 356:	0e 94 94 03 	call	0x728	; 0x728 <tp_statflash>
 35a:	be 01       	movw	r22, r28
 35c:	6f 5f       	subi	r22, 0xFF	; 255
 35e:	7f 4f       	sbci	r23, 0xFF	; 255
 360:	86 e0       	ldi	r24, 0x06	; 6
 362:	90 e2       	ldi	r25, 0x20	; 32
 364:	0e 94 83 03 	call	0x706	; 0x706 <tp_read>
 368:	88 23       	and	r24, r24
 36a:	99 f3       	breq	.-26     	; 0x352 <main+0x106>
 36c:	87 e5       	ldi	r24, 0x57	; 87
 36e:	90 e2       	ldi	r25, 0x20	; 32
 370:	0e 94 94 03 	call	0x728	; 0x728 <tp_statflash>
 374:	69 81       	ldd	r22, Y+1	; 0x01
 376:	8c e3       	ldi	r24, 0x3C	; 60
 378:	90 e2       	ldi	r25, 0x20	; 32
 37a:	0e 94 8c 03 	call	0x718	; 0x718 <tp_write>
 37e:	e9 cf       	rjmp	.-46     	; 0x352 <main+0x106>

00000380 <__vector_25>:
}

// hookup ISRs to port-abstracted interrupt functions

ISR(USARTC0_RXC_vect){
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	08 b6       	in	r0, 0x38	; 56
 38c:	0f 92       	push	r0
 38e:	18 be       	out	0x38, r1	; 56
 390:	09 b6       	in	r0, 0x39	; 57
 392:	0f 92       	push	r0
 394:	19 be       	out	0x39, r1	; 57
 396:	0b b6       	in	r0, 0x3b	; 59
 398:	0f 92       	push	r0
 39a:	1b be       	out	0x3b, r1	; 59
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
	tp_rxISR(&tp1);
 3b4:	81 e2       	ldi	r24, 0x21	; 33
 3b6:	90 e2       	ldi	r25, 0x20	; 32
 3b8:	0e 94 65 03 	call	0x6ca	; 0x6ca <tp_rxISR>
}
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	bf 91       	pop	r27
 3c2:	af 91       	pop	r26
 3c4:	9f 91       	pop	r25
 3c6:	8f 91       	pop	r24
 3c8:	7f 91       	pop	r23
 3ca:	6f 91       	pop	r22
 3cc:	5f 91       	pop	r21
 3ce:	4f 91       	pop	r20
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0b be       	out	0x3b, r0	; 59
 3d8:	0f 90       	pop	r0
 3da:	09 be       	out	0x39, r0	; 57
 3dc:	0f 90       	pop	r0
 3de:	08 be       	out	0x38, r0	; 56
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <__vector_28>:


ISR(USARTC1_RXC_vect){
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
 3f4:	08 b6       	in	r0, 0x38	; 56
 3f6:	0f 92       	push	r0
 3f8:	18 be       	out	0x38, r1	; 56
 3fa:	09 b6       	in	r0, 0x39	; 57
 3fc:	0f 92       	push	r0
 3fe:	19 be       	out	0x39, r1	; 57
 400:	0b b6       	in	r0, 0x3b	; 59
 402:	0f 92       	push	r0
 404:	1b be       	out	0x3b, r1	; 59
 406:	2f 93       	push	r18
 408:	3f 93       	push	r19
 40a:	4f 93       	push	r20
 40c:	5f 93       	push	r21
 40e:	6f 93       	push	r22
 410:	7f 93       	push	r23
 412:	8f 93       	push	r24
 414:	9f 93       	push	r25
 416:	af 93       	push	r26
 418:	bf 93       	push	r27
 41a:	ef 93       	push	r30
 41c:	ff 93       	push	r31
	tp_rxISR(&tp2);
 41e:	86 e0       	ldi	r24, 0x06	; 6
 420:	90 e2       	ldi	r25, 0x20	; 32
 422:	0e 94 65 03 	call	0x6ca	; 0x6ca <tp_rxISR>
}
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	bf 91       	pop	r27
 42c:	af 91       	pop	r26
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	7f 91       	pop	r23
 434:	6f 91       	pop	r22
 436:	5f 91       	pop	r21
 438:	4f 91       	pop	r20
 43a:	3f 91       	pop	r19
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0b be       	out	0x3b, r0	; 59
 442:	0f 90       	pop	r0
 444:	09 be       	out	0x39, r0	; 57
 446:	0f 90       	pop	r0
 448:	08 be       	out	0x38, r0	; 56
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <__vector_88>:

ISR(USARTD0_RXC_vect){
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	08 b6       	in	r0, 0x38	; 56
 460:	0f 92       	push	r0
 462:	18 be       	out	0x38, r1	; 56
 464:	09 b6       	in	r0, 0x39	; 57
 466:	0f 92       	push	r0
 468:	19 be       	out	0x39, r1	; 57
 46a:	0b b6       	in	r0, 0x3b	; 59
 46c:	0f 92       	push	r0
 46e:	1b be       	out	0x3b, r1	; 59
 470:	2f 93       	push	r18
 472:	3f 93       	push	r19
 474:	4f 93       	push	r20
 476:	5f 93       	push	r21
 478:	6f 93       	push	r22
 47a:	7f 93       	push	r23
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	af 93       	push	r26
 482:	bf 93       	push	r27
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
	tp_rxISR(&tp3);
 488:	87 e5       	ldi	r24, 0x57	; 87
 48a:	90 e2       	ldi	r25, 0x20	; 32
 48c:	0e 94 65 03 	call	0x6ca	; 0x6ca <tp_rxISR>
}
 490:	ff 91       	pop	r31
 492:	ef 91       	pop	r30
 494:	bf 91       	pop	r27
 496:	af 91       	pop	r26
 498:	9f 91       	pop	r25
 49a:	8f 91       	pop	r24
 49c:	7f 91       	pop	r23
 49e:	6f 91       	pop	r22
 4a0:	5f 91       	pop	r21
 4a2:	4f 91       	pop	r20
 4a4:	3f 91       	pop	r19
 4a6:	2f 91       	pop	r18
 4a8:	0f 90       	pop	r0
 4aa:	0b be       	out	0x3b, r0	; 59
 4ac:	0f 90       	pop	r0
 4ae:	09 be       	out	0x39, r0	; 57
 4b0:	0f 90       	pop	r0
 4b2:	08 be       	out	0x38, r0	; 56
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <__vector_91>:

ISR(USARTD1_RXC_vect){
 4be:	1f 92       	push	r1
 4c0:	0f 92       	push	r0
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	08 b6       	in	r0, 0x38	; 56
 4ca:	0f 92       	push	r0
 4cc:	18 be       	out	0x38, r1	; 56
 4ce:	09 b6       	in	r0, 0x39	; 57
 4d0:	0f 92       	push	r0
 4d2:	19 be       	out	0x39, r1	; 57
 4d4:	0b b6       	in	r0, 0x3b	; 59
 4d6:	0f 92       	push	r0
 4d8:	1b be       	out	0x3b, r1	; 59
 4da:	2f 93       	push	r18
 4dc:	3f 93       	push	r19
 4de:	4f 93       	push	r20
 4e0:	5f 93       	push	r21
 4e2:	6f 93       	push	r22
 4e4:	7f 93       	push	r23
 4e6:	8f 93       	push	r24
 4e8:	9f 93       	push	r25
 4ea:	af 93       	push	r26
 4ec:	bf 93       	push	r27
 4ee:	ef 93       	push	r30
 4f0:	ff 93       	push	r31
	tp_rxISR(&tp4);
 4f2:	8c e3       	ldi	r24, 0x3C	; 60
 4f4:	90 e2       	ldi	r25, 0x20	; 32
 4f6:	0e 94 65 03 	call	0x6ca	; 0x6ca <tp_rxISR>
}
 4fa:	ff 91       	pop	r31
 4fc:	ef 91       	pop	r30
 4fe:	bf 91       	pop	r27
 500:	af 91       	pop	r26
 502:	9f 91       	pop	r25
 504:	8f 91       	pop	r24
 506:	7f 91       	pop	r23
 508:	6f 91       	pop	r22
 50a:	5f 91       	pop	r21
 50c:	4f 91       	pop	r20
 50e:	3f 91       	pop	r19
 510:	2f 91       	pop	r18
 512:	0f 90       	pop	r0
 514:	0b be       	out	0x3b, r0	; 59
 516:	0f 90       	pop	r0
 518:	09 be       	out	0x39, r0	; 57
 51a:	0f 90       	pop	r0
 51c:	08 be       	out	0x38, r0	; 56
 51e:	0f 90       	pop	r0
 520:	0f be       	out	0x3f, r0	; 63
 522:	0f 90       	pop	r0
 524:	1f 90       	pop	r1
 526:	18 95       	reti

00000528 <rb_reset>:
	rb_reset(rb);
	return 1;
}

uint8_t rb_reset(ringbuffer_t *rb){
	if(rb){
 528:	00 97       	sbiw	r24, 0x00	; 0
 52a:	39 f0       	breq	.+14     	; 0x53a <rb_reset+0x12>
		rb->head = 0;
 52c:	fc 01       	movw	r30, r24
 52e:	12 82       	std	Z+2, r1	; 0x02
 530:	13 82       	std	Z+3, r1	; 0x03
		rb->tail = 0;
 532:	14 82       	std	Z+4, r1	; 0x04
 534:	15 82       	std	Z+5, r1	; 0x05
		return 1;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	08 95       	ret
	} else {
		return 0;
 53a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 53c:	08 95       	ret

0000053e <rb_init>:
#include "ringbuffer.h"
#include <stdlib.h>
#include <avr/io.h>

uint8_t rb_init(ringbuffer_t *rb, size_t size){
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	ec 01       	movw	r28, r24
 544:	cb 01       	movw	r24, r22
	rb->size = size;
 546:	6e 83       	std	Y+6, r22	; 0x06
 548:	7f 83       	std	Y+7, r23	; 0x07
	rb->buffer = malloc(rb->size);
 54a:	0e 94 b1 03 	call	0x762	; 0x762 <malloc>
 54e:	88 83       	st	Y, r24
 550:	99 83       	std	Y+1, r25	; 0x01
	rb_reset(rb);
 552:	ce 01       	movw	r24, r28
 554:	0e 94 94 02 	call	0x528	; 0x528 <rb_reset>
	return 1;
}
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <rb_put>:
		return 0;
	}
}


uint8_t rb_put(ringbuffer_t *rb, uint8_t data){
 560:	fc 01       	movw	r30, r24
	if(rb){
 562:	89 2b       	or	r24, r25
 564:	f1 f0       	breq	.+60     	; 0x5a2 <rb_put+0x42>
		rb->buffer[rb->head] = data;
 566:	a0 81       	ld	r26, Z
 568:	b1 81       	ldd	r27, Z+1	; 0x01
 56a:	82 81       	ldd	r24, Z+2	; 0x02
 56c:	93 81       	ldd	r25, Z+3	; 0x03
 56e:	a8 0f       	add	r26, r24
 570:	b9 1f       	adc	r27, r25
 572:	6c 93       	st	X, r22
		rb->head = (rb->head + 1) % rb->size; // for wrap around
 574:	26 81       	ldd	r18, Z+6	; 0x06
 576:	37 81       	ldd	r19, Z+7	; 0x07
 578:	82 81       	ldd	r24, Z+2	; 0x02
 57a:	93 81       	ldd	r25, Z+3	; 0x03
 57c:	01 96       	adiw	r24, 0x01	; 1
 57e:	b9 01       	movw	r22, r18
 580:	0e 94 9d 03 	call	0x73a	; 0x73a <__udivmodhi4>
 584:	82 83       	std	Z+2, r24	; 0x02
 586:	93 83       	std	Z+3, r25	; 0x03
		if(rb->head == rb->tail){
 588:	44 81       	ldd	r20, Z+4	; 0x04
 58a:	55 81       	ldd	r21, Z+5	; 0x05
 58c:	84 17       	cp	r24, r20
 58e:	95 07       	cpc	r25, r21
 590:	51 f4       	brne	.+20     	; 0x5a6 <rb_put+0x46>
			rb->tail = (rb->tail + 1) % rb->size;
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	b9 01       	movw	r22, r18
 596:	0e 94 9d 03 	call	0x73a	; 0x73a <__udivmodhi4>
 59a:	84 83       	std	Z+4, r24	; 0x04
 59c:	95 83       	std	Z+5, r25	; 0x05
		}
		return 1;
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	08 95       	ret
	} else {
		return 0;
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	08 95       	ret
		rb->buffer[rb->head] = data;
		rb->head = (rb->head + 1) % rb->size; // for wrap around
		if(rb->head == rb->tail){
			rb->tail = (rb->tail + 1) % rb->size;
		}
		return 1;
 5a6:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return 0;
	}
}
 5a8:	08 95       	ret

000005aa <rb_get>:

uint8_t rb_get(ringbuffer_t *rb, uint8_t *data){
 5aa:	fc 01       	movw	r30, r24
	if(rb && data && !rb_empty(*rb)){
 5ac:	89 2b       	or	r24, r25
 5ae:	e1 f0       	breq	.+56     	; 0x5e8 <rb_get+0x3e>
 5b0:	61 15       	cp	r22, r1
 5b2:	71 05       	cpc	r23, r1
 5b4:	d9 f0       	breq	.+54     	; 0x5ec <rb_get+0x42>
 5b6:	22 81       	ldd	r18, Z+2	; 0x02
 5b8:	33 81       	ldd	r19, Z+3	; 0x03
 5ba:	84 81       	ldd	r24, Z+4	; 0x04
 5bc:	95 81       	ldd	r25, Z+5	; 0x05
 5be:	28 17       	cp	r18, r24
 5c0:	39 07       	cpc	r19, r25
 5c2:	b1 f0       	breq	.+44     	; 0x5f0 <rb_get+0x46>
		*data = rb->buffer[rb->tail];
 5c4:	a0 81       	ld	r26, Z
 5c6:	b1 81       	ldd	r27, Z+1	; 0x01
 5c8:	a8 0f       	add	r26, r24
 5ca:	b9 1f       	adc	r27, r25
 5cc:	8c 91       	ld	r24, X
 5ce:	db 01       	movw	r26, r22
 5d0:	8c 93       	st	X, r24
		rb->tail = (rb->tail + 1) % rb->size;
 5d2:	84 81       	ldd	r24, Z+4	; 0x04
 5d4:	95 81       	ldd	r25, Z+5	; 0x05
 5d6:	01 96       	adiw	r24, 0x01	; 1
 5d8:	66 81       	ldd	r22, Z+6	; 0x06
 5da:	77 81       	ldd	r23, Z+7	; 0x07
 5dc:	0e 94 9d 03 	call	0x73a	; 0x73a <__udivmodhi4>
 5e0:	84 83       	std	Z+4, r24	; 0x04
 5e2:	95 83       	std	Z+5, r25	; 0x05
		return 1;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	08 95       	ret
	} else {
		return 0;
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	08 95       	ret
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	08 95       	ret
 5f0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 5f2:	08 95       	ret

000005f4 <tp_new>:
 */ 

#include "tinyport.h"
#include <util/delay.h>

tinyport_t tp_new(USART_t *uart, PORT_t *port, uint8_t pinRX_bm, uint8_t pinTX_bm, uint8_t pinSTAT_bm){
 5f4:	cf 92       	push	r12
 5f6:	df 92       	push	r13
 5f8:	ef 92       	push	r14
 5fa:	0f 93       	push	r16
 5fc:	cf 93       	push	r28
 5fe:	df 93       	push	r29
 600:	cd b7       	in	r28, 0x3d	; 61
 602:	de b7       	in	r29, 0x3e	; 62
 604:	6b 97       	sbiw	r28, 0x1b	; 27
 606:	cd bf       	out	0x3d, r28	; 61
 608:	de bf       	out	0x3e, r29	; 62
 60a:	6c 01       	movw	r12, r24
	
	tinyport_t tp;
	
	tp.uart = uart;
 60c:	69 83       	std	Y+1, r22	; 0x01
 60e:	7a 83       	std	Y+2, r23	; 0x02
	tp.port = port;
 610:	4b 83       	std	Y+3, r20	; 0x03
 612:	5c 83       	std	Y+4, r21	; 0x04
	
	tp.pinRX_bm = pinRX_bm;
 614:	2d 83       	std	Y+5, r18	; 0x05
	tp.pinTX_bm = pinTX_bm;
 616:	0e 83       	std	Y+6, r16	; 0x06
	tp.pinSTAT_bm = pinSTAT_bm;
 618:	ef 82       	std	Y+7, r14	; 0x07
	
	tp.txstate = TP_TX_STATE_EMPTY;
 61a:	18 86       	std	Y+8, r1	; 0x08
	tp.rxstate = TP_RX_STATE_EMPTY;
 61c:	19 86       	std	Y+9, r1	; 0x09
	tp.pstate = TP_PSTATE_OUTSIDE;
 61e:	1a 86       	std	Y+10, r1	; 0x0a
	
	rb_init(&tp.rbrx, TP_RXBUF_SIZE);
 620:	60 e8       	ldi	r22, 0x80	; 128
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	ce 01       	movw	r24, r28
 626:	0c 96       	adiw	r24, 0x0c	; 12
 628:	0e 94 9f 02 	call	0x53e	; 0x53e <rb_init>
	rb_init(&tp.rbtx, TP_TXBUF_SIZE);
 62c:	60 e8       	ldi	r22, 0x80	; 128
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	ce 01       	movw	r24, r28
 632:	44 96       	adiw	r24, 0x14	; 20
 634:	0e 94 9f 02 	call	0x53e	; 0x53e <rb_init>
	
	return tp;
 638:	8b e1       	ldi	r24, 0x1B	; 27
 63a:	fe 01       	movw	r30, r28
 63c:	31 96       	adiw	r30, 0x01	; 1
 63e:	d6 01       	movw	r26, r12
 640:	01 90       	ld	r0, Z+
 642:	0d 92       	st	X+, r0
 644:	8a 95       	dec	r24
 646:	e1 f7       	brne	.-8      	; 0x640 <tp_new+0x4c>
}
 648:	c6 01       	movw	r24, r12
 64a:	6b 96       	adiw	r28, 0x1b	; 27
 64c:	cd bf       	out	0x3d, r28	; 61
 64e:	de bf       	out	0x3e, r29	; 62
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	0f 91       	pop	r16
 656:	ef 90       	pop	r14
 658:	df 90       	pop	r13
 65a:	cf 90       	pop	r12
 65c:	08 95       	ret

0000065e <tp_init>:

// mostly, start the uart port
void tp_init(tinyport_t *tp){
 65e:	fc 01       	movw	r30, r24
	// USART is in UART (async) mode automatically
	// these registers setup the baudrate - the bitrate
	// this seems a bit tricky. I am taking for granted that the clock is at 48MHz,
	tp->uart->BAUDCTRLA = TP_UART_BAUDCONTROLA;
 660:	a0 81       	ld	r26, Z
 662:	b1 81       	ldd	r27, Z+1	; 0x01
 664:	8b e9       	ldi	r24, 0x9B	; 155
 666:	16 96       	adiw	r26, 0x06	; 6
 668:	8c 93       	st	X, r24
	tp->uart->BAUDCTRLB = TP_UART_BAUDCONTROLB;
 66a:	a0 81       	ld	r26, Z
 66c:	b1 81       	ldd	r27, Z+1	; 0x01
 66e:	17 96       	adiw	r26, 0x07	; 7
 670:	1c 92       	st	X, r1
	
	// setup for interrupt
	// receive complete interrupt low level, transmit complete interupt off, transmit buffer empty interupt off
	tp->uart->CTRLA |= USART_RXCINTLVL_LO_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
 672:	a0 81       	ld	r26, Z
 674:	b1 81       	ldd	r27, Z+1	; 0x01
 676:	13 96       	adiw	r26, 0x03	; 3
 678:	8c 91       	ld	r24, X
 67a:	13 97       	sbiw	r26, 0x03	; 3
 67c:	80 61       	ori	r24, 0x10	; 16
 67e:	13 96       	adiw	r26, 0x03	; 3
 680:	8c 93       	st	X, r24

	// enables tx and rx
	tp->uart->CTRLB = USART_TXEN_bm | USART_RXEN_bm;
 682:	a0 81       	ld	r26, Z
 684:	b1 81       	ldd	r27, Z+1	; 0x01
 686:	88 e1       	ldi	r24, 0x18	; 24
 688:	14 96       	adiw	r26, 0x04	; 4
 68a:	8c 93       	st	X, r24
	
	// setup mode
	tp->uart->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc; // 8 bit word, async, no parity bit}
 68c:	a0 81       	ld	r26, Z
 68e:	b1 81       	ldd	r27, Z+1	; 0x01
 690:	83 e0       	ldi	r24, 0x03	; 3
 692:	15 96       	adiw	r26, 0x05	; 5
 694:	8c 93       	st	X, r24
	
	// some GPIO setup, to agree with the UART peripheral
	// tx pin (pin mapping is in the 'Datasheet', registers etc are in the 'Manual') these are default pins
	tp->port->OUTSET = tp->pinTX_bm;
 696:	a2 81       	ldd	r26, Z+2	; 0x02
 698:	b3 81       	ldd	r27, Z+3	; 0x03
 69a:	85 81       	ldd	r24, Z+5	; 0x05
 69c:	15 96       	adiw	r26, 0x05	; 5
 69e:	8c 93       	st	X, r24
	tp->port->DIRSET = tp->pinTX_bm;
 6a0:	a2 81       	ldd	r26, Z+2	; 0x02
 6a2:	b3 81       	ldd	r27, Z+3	; 0x03
 6a4:	85 81       	ldd	r24, Z+5	; 0x05
 6a6:	11 96       	adiw	r26, 0x01	; 1
 6a8:	8c 93       	st	X, r24
	// rx pin
	tp->port->DIRCLR = tp->pinRX_bm;
 6aa:	a2 81       	ldd	r26, Z+2	; 0x02
 6ac:	b3 81       	ldd	r27, Z+3	; 0x03
 6ae:	84 81       	ldd	r24, Z+4	; 0x04
 6b0:	12 96       	adiw	r26, 0x02	; 2
 6b2:	8c 93       	st	X, r24
	tp->port->OUTCLR = tp->pinRX_bm;
 6b4:	a2 81       	ldd	r26, Z+2	; 0x02
 6b6:	b3 81       	ldd	r27, Z+3	; 0x03
 6b8:	84 81       	ldd	r24, Z+4	; 0x04
 6ba:	16 96       	adiw	r26, 0x06	; 6
 6bc:	8c 93       	st	X, r24
	// stat pin
	tp->port->DIRSET = tp->pinSTAT_bm;
 6be:	a2 81       	ldd	r26, Z+2	; 0x02
 6c0:	b3 81       	ldd	r27, Z+3	; 0x03
 6c2:	86 81       	ldd	r24, Z+6	; 0x06
 6c4:	11 96       	adiw	r26, 0x01	; 1
 6c6:	8c 93       	st	X, r24
 6c8:	08 95       	ret

000006ca <tp_rxISR>:
}

void tp_rxISR(tinyport_t *tp){ // towards a passalong
 6ca:	fc 01       	movw	r30, r24
	while(!(tp->uart->STATUS & USART_DREIF_bm)); // while not ready, wait (this is blocking)
	tp->uart->DATA = data;
}

void tp_statflash(tinyport_t *tp){
	tp->port->OUTTGL = tp->pinSTAT_bm;
 6cc:	a2 81       	ldd	r26, Z+2	; 0x02
 6ce:	b3 81       	ldd	r27, Z+3	; 0x03
 6d0:	86 81       	ldd	r24, Z+6	; 0x06
 6d2:	17 96       	adiw	r26, 0x07	; 7
 6d4:	8c 93       	st	X, r24
}

void tp_rxISR(tinyport_t *tp){ // towards a passalong
	tp_statflash(tp);
	
	tp->bumpdata = tp->uart->DATA;
 6d6:	a0 81       	ld	r26, Z
 6d8:	b1 81       	ldd	r27, Z+1	; 0x01
 6da:	6c 91       	ld	r22, X
 6dc:	62 87       	std	Z+10, r22	; 0x0a
	
	switch (tp->pstate){
 6de:	81 85       	ldd	r24, Z+9	; 0x09
 6e0:	88 23       	and	r24, r24
 6e2:	19 f0       	breq	.+6      	; 0x6ea <tp_rxISR+0x20>
 6e4:	81 30       	cpi	r24, 0x01	; 1
 6e6:	31 f0       	breq	.+12     	; 0x6f4 <tp_rxISR+0x2a>
 6e8:	08 95       	ret
		
		case TP_PSTATE_OUTSIDE:
			if(tp->bumpdata == 126){
 6ea:	6e 37       	cpi	r22, 0x7E	; 126
 6ec:	59 f4       	brne	.+22     	; 0x704 <tp_rxISR+0x3a>
				tp->pstate = TP_PSTATE_INSIDE;
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	81 87       	std	Z+9, r24	; 0x09
 6f2:	08 95       	ret
			}
			break;
			
		case TP_PSTATE_INSIDE:
			if(tp->bumpdata == 126){
 6f4:	6e 37       	cpi	r22, 0x7E	; 126
 6f6:	11 f4       	brne	.+4      	; 0x6fc <tp_rxISR+0x32>
				tp->pstate = TP_PSTATE_OUTSIDE;
 6f8:	11 86       	std	Z+9, r1	; 0x09
 6fa:	08 95       	ret
 6fc:	cf 01       	movw	r24, r30
			} else {
				rb_put(&tp->rbrx, tp->bumpdata);
 6fe:	0b 96       	adiw	r24, 0x0b	; 11
 700:	0e 94 b0 02 	call	0x560	; 0x560 <rb_put>
 704:	08 95       	ret

00000706 <tp_read>:
		break;	
	}
}

uint8_t tp_read(tinyport_t *tp, uint8_t *data){ // TODO: set at pointer, return true if non empty
	if(rb_get(&tp->rbrx, data)){
 706:	0b 96       	adiw	r24, 0x0b	; 11
 708:	0e 94 d5 02 	call	0x5aa	; 0x5aa <rb_get>
 70c:	91 e0       	ldi	r25, 0x01	; 1
 70e:	81 11       	cpse	r24, r1
 710:	01 c0       	rjmp	.+2      	; 0x714 <tp_read+0xe>
 712:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	} else {
		return 0;
	}
}
 714:	89 2f       	mov	r24, r25
 716:	08 95       	ret

00000718 <tp_write>:

// https://lost-contact.mit.edu/afs/sur5r.net/service/drivers+doc/Atmel/ATXMEGA/AVR1307/code/doxygen/usart__driver_8c.html#7fdb922f6b858bef8515e23229efd970

void tp_write(tinyport_t *tp, uint8_t data){
	while(!(tp->uart->STATUS & USART_DREIF_bm)); // while not ready, wait (this is blocking)
 718:	dc 01       	movw	r26, r24
 71a:	ed 91       	ld	r30, X+
 71c:	fc 91       	ld	r31, X
 71e:	81 81       	ldd	r24, Z+1	; 0x01
 720:	85 ff       	sbrs	r24, 5
 722:	fd cf       	rjmp	.-6      	; 0x71e <tp_write+0x6>
	tp->uart->DATA = data;
 724:	60 83       	st	Z, r22
 726:	08 95       	ret

00000728 <tp_statflash>:
}

void tp_statflash(tinyport_t *tp){
	tp->port->OUTTGL = tp->pinSTAT_bm;
 728:	dc 01       	movw	r26, r24
 72a:	12 96       	adiw	r26, 0x02	; 2
 72c:	ed 91       	ld	r30, X+
 72e:	fc 91       	ld	r31, X
 730:	13 97       	sbiw	r26, 0x03	; 3
 732:	16 96       	adiw	r26, 0x06	; 6
 734:	8c 91       	ld	r24, X
 736:	87 83       	std	Z+7, r24	; 0x07
 738:	08 95       	ret

0000073a <__udivmodhi4>:
 73a:	aa 1b       	sub	r26, r26
 73c:	bb 1b       	sub	r27, r27
 73e:	51 e1       	ldi	r21, 0x11	; 17
 740:	07 c0       	rjmp	.+14     	; 0x750 <__udivmodhi4_ep>

00000742 <__udivmodhi4_loop>:
 742:	aa 1f       	adc	r26, r26
 744:	bb 1f       	adc	r27, r27
 746:	a6 17       	cp	r26, r22
 748:	b7 07       	cpc	r27, r23
 74a:	10 f0       	brcs	.+4      	; 0x750 <__udivmodhi4_ep>
 74c:	a6 1b       	sub	r26, r22
 74e:	b7 0b       	sbc	r27, r23

00000750 <__udivmodhi4_ep>:
 750:	88 1f       	adc	r24, r24
 752:	99 1f       	adc	r25, r25
 754:	5a 95       	dec	r21
 756:	a9 f7       	brne	.-22     	; 0x742 <__udivmodhi4_loop>
 758:	80 95       	com	r24
 75a:	90 95       	com	r25
 75c:	bc 01       	movw	r22, r24
 75e:	cd 01       	movw	r24, r26
 760:	08 95       	ret

00000762 <malloc>:
 762:	0f 93       	push	r16
 764:	1f 93       	push	r17
 766:	cf 93       	push	r28
 768:	df 93       	push	r29
 76a:	82 30       	cpi	r24, 0x02	; 2
 76c:	91 05       	cpc	r25, r1
 76e:	10 f4       	brcc	.+4      	; 0x774 <malloc+0x12>
 770:	82 e0       	ldi	r24, 0x02	; 2
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <__flp>
 778:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <__flp+0x1>
 77c:	20 e0       	ldi	r18, 0x00	; 0
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	a0 e0       	ldi	r26, 0x00	; 0
 782:	b0 e0       	ldi	r27, 0x00	; 0
 784:	30 97       	sbiw	r30, 0x00	; 0
 786:	19 f1       	breq	.+70     	; 0x7ce <malloc+0x6c>
 788:	40 81       	ld	r20, Z
 78a:	51 81       	ldd	r21, Z+1	; 0x01
 78c:	02 81       	ldd	r16, Z+2	; 0x02
 78e:	13 81       	ldd	r17, Z+3	; 0x03
 790:	48 17       	cp	r20, r24
 792:	59 07       	cpc	r21, r25
 794:	c8 f0       	brcs	.+50     	; 0x7c8 <malloc+0x66>
 796:	84 17       	cp	r24, r20
 798:	95 07       	cpc	r25, r21
 79a:	69 f4       	brne	.+26     	; 0x7b6 <malloc+0x54>
 79c:	10 97       	sbiw	r26, 0x00	; 0
 79e:	31 f0       	breq	.+12     	; 0x7ac <malloc+0x4a>
 7a0:	12 96       	adiw	r26, 0x02	; 2
 7a2:	0c 93       	st	X, r16
 7a4:	12 97       	sbiw	r26, 0x02	; 2
 7a6:	13 96       	adiw	r26, 0x03	; 3
 7a8:	1c 93       	st	X, r17
 7aa:	27 c0       	rjmp	.+78     	; 0x7fa <malloc+0x98>
 7ac:	00 93 74 20 	sts	0x2074, r16	; 0x802074 <__flp>
 7b0:	10 93 75 20 	sts	0x2075, r17	; 0x802075 <__flp+0x1>
 7b4:	22 c0       	rjmp	.+68     	; 0x7fa <malloc+0x98>
 7b6:	21 15       	cp	r18, r1
 7b8:	31 05       	cpc	r19, r1
 7ba:	19 f0       	breq	.+6      	; 0x7c2 <malloc+0x60>
 7bc:	42 17       	cp	r20, r18
 7be:	53 07       	cpc	r21, r19
 7c0:	18 f4       	brcc	.+6      	; 0x7c8 <malloc+0x66>
 7c2:	9a 01       	movw	r18, r20
 7c4:	bd 01       	movw	r22, r26
 7c6:	ef 01       	movw	r28, r30
 7c8:	df 01       	movw	r26, r30
 7ca:	f8 01       	movw	r30, r16
 7cc:	db cf       	rjmp	.-74     	; 0x784 <malloc+0x22>
 7ce:	21 15       	cp	r18, r1
 7d0:	31 05       	cpc	r19, r1
 7d2:	f9 f0       	breq	.+62     	; 0x812 <malloc+0xb0>
 7d4:	28 1b       	sub	r18, r24
 7d6:	39 0b       	sbc	r19, r25
 7d8:	24 30       	cpi	r18, 0x04	; 4
 7da:	31 05       	cpc	r19, r1
 7dc:	80 f4       	brcc	.+32     	; 0x7fe <malloc+0x9c>
 7de:	8a 81       	ldd	r24, Y+2	; 0x02
 7e0:	9b 81       	ldd	r25, Y+3	; 0x03
 7e2:	61 15       	cp	r22, r1
 7e4:	71 05       	cpc	r23, r1
 7e6:	21 f0       	breq	.+8      	; 0x7f0 <malloc+0x8e>
 7e8:	fb 01       	movw	r30, r22
 7ea:	82 83       	std	Z+2, r24	; 0x02
 7ec:	93 83       	std	Z+3, r25	; 0x03
 7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <malloc+0x96>
 7f0:	80 93 74 20 	sts	0x2074, r24	; 0x802074 <__flp>
 7f4:	90 93 75 20 	sts	0x2075, r25	; 0x802075 <__flp+0x1>
 7f8:	fe 01       	movw	r30, r28
 7fa:	32 96       	adiw	r30, 0x02	; 2
 7fc:	44 c0       	rjmp	.+136    	; 0x886 <malloc+0x124>
 7fe:	fe 01       	movw	r30, r28
 800:	e2 0f       	add	r30, r18
 802:	f3 1f       	adc	r31, r19
 804:	81 93       	st	Z+, r24
 806:	91 93       	st	Z+, r25
 808:	22 50       	subi	r18, 0x02	; 2
 80a:	31 09       	sbc	r19, r1
 80c:	28 83       	st	Y, r18
 80e:	39 83       	std	Y+1, r19	; 0x01
 810:	3a c0       	rjmp	.+116    	; 0x886 <malloc+0x124>
 812:	20 91 72 20 	lds	r18, 0x2072	; 0x802072 <__brkval>
 816:	30 91 73 20 	lds	r19, 0x2073	; 0x802073 <__brkval+0x1>
 81a:	23 2b       	or	r18, r19
 81c:	41 f4       	brne	.+16     	; 0x82e <malloc+0xcc>
 81e:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
 822:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
 826:	20 93 72 20 	sts	0x2072, r18	; 0x802072 <__brkval>
 82a:	30 93 73 20 	sts	0x2073, r19	; 0x802073 <__brkval+0x1>
 82e:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
 832:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
 836:	21 15       	cp	r18, r1
 838:	31 05       	cpc	r19, r1
 83a:	41 f4       	brne	.+16     	; 0x84c <malloc+0xea>
 83c:	2d b7       	in	r18, 0x3d	; 61
 83e:	3e b7       	in	r19, 0x3e	; 62
 840:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
 844:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
 848:	24 1b       	sub	r18, r20
 84a:	35 0b       	sbc	r19, r21
 84c:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <__brkval>
 850:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <__brkval+0x1>
 854:	e2 17       	cp	r30, r18
 856:	f3 07       	cpc	r31, r19
 858:	a0 f4       	brcc	.+40     	; 0x882 <malloc+0x120>
 85a:	2e 1b       	sub	r18, r30
 85c:	3f 0b       	sbc	r19, r31
 85e:	28 17       	cp	r18, r24
 860:	39 07       	cpc	r19, r25
 862:	78 f0       	brcs	.+30     	; 0x882 <malloc+0x120>
 864:	ac 01       	movw	r20, r24
 866:	4e 5f       	subi	r20, 0xFE	; 254
 868:	5f 4f       	sbci	r21, 0xFF	; 255
 86a:	24 17       	cp	r18, r20
 86c:	35 07       	cpc	r19, r21
 86e:	48 f0       	brcs	.+18     	; 0x882 <malloc+0x120>
 870:	4e 0f       	add	r20, r30
 872:	5f 1f       	adc	r21, r31
 874:	40 93 72 20 	sts	0x2072, r20	; 0x802072 <__brkval>
 878:	50 93 73 20 	sts	0x2073, r21	; 0x802073 <__brkval+0x1>
 87c:	81 93       	st	Z+, r24
 87e:	91 93       	st	Z+, r25
 880:	02 c0       	rjmp	.+4      	; 0x886 <malloc+0x124>
 882:	e0 e0       	ldi	r30, 0x00	; 0
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	cf 01       	movw	r24, r30
 888:	df 91       	pop	r29
 88a:	cf 91       	pop	r28
 88c:	1f 91       	pop	r17
 88e:	0f 91       	pop	r16
 890:	08 95       	ret

00000892 <free>:
 892:	cf 93       	push	r28
 894:	df 93       	push	r29
 896:	00 97       	sbiw	r24, 0x00	; 0
 898:	09 f4       	brne	.+2      	; 0x89c <free+0xa>
 89a:	81 c0       	rjmp	.+258    	; 0x99e <free+0x10c>
 89c:	fc 01       	movw	r30, r24
 89e:	32 97       	sbiw	r30, 0x02	; 2
 8a0:	12 82       	std	Z+2, r1	; 0x02
 8a2:	13 82       	std	Z+3, r1	; 0x03
 8a4:	a0 91 74 20 	lds	r26, 0x2074	; 0x802074 <__flp>
 8a8:	b0 91 75 20 	lds	r27, 0x2075	; 0x802075 <__flp+0x1>
 8ac:	10 97       	sbiw	r26, 0x00	; 0
 8ae:	81 f4       	brne	.+32     	; 0x8d0 <free+0x3e>
 8b0:	20 81       	ld	r18, Z
 8b2:	31 81       	ldd	r19, Z+1	; 0x01
 8b4:	82 0f       	add	r24, r18
 8b6:	93 1f       	adc	r25, r19
 8b8:	20 91 72 20 	lds	r18, 0x2072	; 0x802072 <__brkval>
 8bc:	30 91 73 20 	lds	r19, 0x2073	; 0x802073 <__brkval+0x1>
 8c0:	28 17       	cp	r18, r24
 8c2:	39 07       	cpc	r19, r25
 8c4:	51 f5       	brne	.+84     	; 0x91a <free+0x88>
 8c6:	e0 93 72 20 	sts	0x2072, r30	; 0x802072 <__brkval>
 8ca:	f0 93 73 20 	sts	0x2073, r31	; 0x802073 <__brkval+0x1>
 8ce:	67 c0       	rjmp	.+206    	; 0x99e <free+0x10c>
 8d0:	ed 01       	movw	r28, r26
 8d2:	20 e0       	ldi	r18, 0x00	; 0
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	ce 17       	cp	r28, r30
 8d8:	df 07       	cpc	r29, r31
 8da:	40 f4       	brcc	.+16     	; 0x8ec <free+0x5a>
 8dc:	4a 81       	ldd	r20, Y+2	; 0x02
 8de:	5b 81       	ldd	r21, Y+3	; 0x03
 8e0:	9e 01       	movw	r18, r28
 8e2:	41 15       	cp	r20, r1
 8e4:	51 05       	cpc	r21, r1
 8e6:	f1 f0       	breq	.+60     	; 0x924 <free+0x92>
 8e8:	ea 01       	movw	r28, r20
 8ea:	f5 cf       	rjmp	.-22     	; 0x8d6 <free+0x44>
 8ec:	c2 83       	std	Z+2, r28	; 0x02
 8ee:	d3 83       	std	Z+3, r29	; 0x03
 8f0:	40 81       	ld	r20, Z
 8f2:	51 81       	ldd	r21, Z+1	; 0x01
 8f4:	84 0f       	add	r24, r20
 8f6:	95 1f       	adc	r25, r21
 8f8:	c8 17       	cp	r28, r24
 8fa:	d9 07       	cpc	r29, r25
 8fc:	59 f4       	brne	.+22     	; 0x914 <free+0x82>
 8fe:	88 81       	ld	r24, Y
 900:	99 81       	ldd	r25, Y+1	; 0x01
 902:	84 0f       	add	r24, r20
 904:	95 1f       	adc	r25, r21
 906:	02 96       	adiw	r24, 0x02	; 2
 908:	80 83       	st	Z, r24
 90a:	91 83       	std	Z+1, r25	; 0x01
 90c:	8a 81       	ldd	r24, Y+2	; 0x02
 90e:	9b 81       	ldd	r25, Y+3	; 0x03
 910:	82 83       	std	Z+2, r24	; 0x02
 912:	93 83       	std	Z+3, r25	; 0x03
 914:	21 15       	cp	r18, r1
 916:	31 05       	cpc	r19, r1
 918:	29 f4       	brne	.+10     	; 0x924 <free+0x92>
 91a:	e0 93 74 20 	sts	0x2074, r30	; 0x802074 <__flp>
 91e:	f0 93 75 20 	sts	0x2075, r31	; 0x802075 <__flp+0x1>
 922:	3d c0       	rjmp	.+122    	; 0x99e <free+0x10c>
 924:	e9 01       	movw	r28, r18
 926:	ea 83       	std	Y+2, r30	; 0x02
 928:	fb 83       	std	Y+3, r31	; 0x03
 92a:	49 91       	ld	r20, Y+
 92c:	59 91       	ld	r21, Y+
 92e:	c4 0f       	add	r28, r20
 930:	d5 1f       	adc	r29, r21
 932:	ec 17       	cp	r30, r28
 934:	fd 07       	cpc	r31, r29
 936:	61 f4       	brne	.+24     	; 0x950 <free+0xbe>
 938:	80 81       	ld	r24, Z
 93a:	91 81       	ldd	r25, Z+1	; 0x01
 93c:	84 0f       	add	r24, r20
 93e:	95 1f       	adc	r25, r21
 940:	02 96       	adiw	r24, 0x02	; 2
 942:	e9 01       	movw	r28, r18
 944:	88 83       	st	Y, r24
 946:	99 83       	std	Y+1, r25	; 0x01
 948:	82 81       	ldd	r24, Z+2	; 0x02
 94a:	93 81       	ldd	r25, Z+3	; 0x03
 94c:	8a 83       	std	Y+2, r24	; 0x02
 94e:	9b 83       	std	Y+3, r25	; 0x03
 950:	e0 e0       	ldi	r30, 0x00	; 0
 952:	f0 e0       	ldi	r31, 0x00	; 0
 954:	12 96       	adiw	r26, 0x02	; 2
 956:	8d 91       	ld	r24, X+
 958:	9c 91       	ld	r25, X
 95a:	13 97       	sbiw	r26, 0x03	; 3
 95c:	00 97       	sbiw	r24, 0x00	; 0
 95e:	19 f0       	breq	.+6      	; 0x966 <free+0xd4>
 960:	fd 01       	movw	r30, r26
 962:	dc 01       	movw	r26, r24
 964:	f7 cf       	rjmp	.-18     	; 0x954 <free+0xc2>
 966:	8d 91       	ld	r24, X+
 968:	9c 91       	ld	r25, X
 96a:	11 97       	sbiw	r26, 0x01	; 1
 96c:	9d 01       	movw	r18, r26
 96e:	2e 5f       	subi	r18, 0xFE	; 254
 970:	3f 4f       	sbci	r19, 0xFF	; 255
 972:	82 0f       	add	r24, r18
 974:	93 1f       	adc	r25, r19
 976:	20 91 72 20 	lds	r18, 0x2072	; 0x802072 <__brkval>
 97a:	30 91 73 20 	lds	r19, 0x2073	; 0x802073 <__brkval+0x1>
 97e:	28 17       	cp	r18, r24
 980:	39 07       	cpc	r19, r25
 982:	69 f4       	brne	.+26     	; 0x99e <free+0x10c>
 984:	30 97       	sbiw	r30, 0x00	; 0
 986:	29 f4       	brne	.+10     	; 0x992 <free+0x100>
 988:	10 92 74 20 	sts	0x2074, r1	; 0x802074 <__flp>
 98c:	10 92 75 20 	sts	0x2075, r1	; 0x802075 <__flp+0x1>
 990:	02 c0       	rjmp	.+4      	; 0x996 <free+0x104>
 992:	12 82       	std	Z+2, r1	; 0x02
 994:	13 82       	std	Z+3, r1	; 0x03
 996:	a0 93 72 20 	sts	0x2072, r26	; 0x802072 <__brkval>
 99a:	b0 93 73 20 	sts	0x2073, r27	; 0x802073 <__brkval+0x1>
 99e:	df 91       	pop	r29
 9a0:	cf 91       	pop	r28
 9a2:	08 95       	ret

000009a4 <_exit>:
 9a4:	f8 94       	cli

000009a6 <__stop_program>:
 9a6:	ff cf       	rjmp	.-2      	; 0x9a6 <__stop_program>
