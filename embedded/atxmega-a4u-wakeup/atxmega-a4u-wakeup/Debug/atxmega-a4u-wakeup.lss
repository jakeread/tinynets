
atxmega-a4u-wakeup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  00000b4e  00000be2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00802006  00802006  00000be8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004072  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c94  00000000  00000000  00004e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c49  00000000  00000000  00007a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b8  00000000  00000000  000086e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023a2  00000000  00000000  00008b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d9c  00000000  00000000  0000af3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000bcd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_25>
  68:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_26>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_28>
  74:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__vector_29>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_88>
 164:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_89>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_92>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee e4       	ldi	r30, 0x4E	; 78
 21c:	fb e0       	ldi	r31, 0x0B	; 11
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a6 30       	cpi	r26, 0x06	; 6
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	a6 e0       	ldi	r26, 0x06	; 6
 234:	b0 e2       	ldi	r27, 0x20	; 32
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a2 31       	cpi	r26, 0x12	; 18
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 26 01 	call	0x24c	; 0x24c <main>
 244:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <main>:
	tp_txISR(tp3);
}

IRS(USARTD1_RXC_vect){
	tp_rxISR(tp4);
}
 24c:	e0 e5       	ldi	r30, 0x50	; 80
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	88 e1       	ldi	r24, 0x18	; 24
 252:	85 83       	std	Z+5, r24	; 0x05
 254:	80 e1       	ldi	r24, 0x10	; 16
 256:	80 83       	st	Z, r24
 258:	81 81       	ldd	r24, Z+1	; 0x01
 25a:	84 ff       	sbrs	r24, 4
 25c:	fd cf       	rjmp	.-6      	; 0x258 <main+0xc>
 25e:	88 ed       	ldi	r24, 0xD8	; 216
 260:	84 bf       	out	0x34, r24	; 52
 262:	84 e0       	ldi	r24, 0x04	; 4
 264:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 268:	00 e1       	ldi	r16, 0x10	; 16
 26a:	28 e0       	ldi	r18, 0x08	; 8
 26c:	44 e0       	ldi	r20, 0x04	; 4
 26e:	60 e4       	ldi	r22, 0x40	; 64
 270:	76 e0       	ldi	r23, 0x06	; 6
 272:	80 ea       	ldi	r24, 0xA0	; 160
 274:	98 e0       	ldi	r25, 0x08	; 8
 276:	0e 94 98 03 	call	0x730	; 0x730 <tp_new>
 27a:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <tp1>
 27e:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <tp1+0x1>
 282:	0e 94 cf 03 	call	0x79e	; 0x79e <tp_init>
 286:	00 e2       	ldi	r16, 0x20	; 32
 288:	20 e8       	ldi	r18, 0x80	; 128
 28a:	40 e4       	ldi	r20, 0x40	; 64
 28c:	60 e4       	ldi	r22, 0x40	; 64
 28e:	76 e0       	ldi	r23, 0x06	; 6
 290:	80 eb       	ldi	r24, 0xB0	; 176
 292:	98 e0       	ldi	r25, 0x08	; 8
 294:	0e 94 98 03 	call	0x730	; 0x730 <tp_new>
 298:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <__data_end>
 29c:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <__data_end+0x1>
 2a0:	0e 94 cf 03 	call	0x79e	; 0x79e <tp_init>
 2a4:	00 e1       	ldi	r16, 0x10	; 16
 2a6:	28 e0       	ldi	r18, 0x08	; 8
 2a8:	44 e0       	ldi	r20, 0x04	; 4
 2aa:	60 e6       	ldi	r22, 0x60	; 96
 2ac:	76 e0       	ldi	r23, 0x06	; 6
 2ae:	80 ea       	ldi	r24, 0xA0	; 160
 2b0:	99 e0       	ldi	r25, 0x09	; 9
 2b2:	0e 94 98 03 	call	0x730	; 0x730 <tp_new>
 2b6:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <tp3>
 2ba:	90 93 0d 20 	sts	0x200D, r25	; 0x80200d <tp3+0x1>
 2be:	0e 94 cf 03 	call	0x79e	; 0x79e <tp_init>
 2c2:	00 e2       	ldi	r16, 0x20	; 32
 2c4:	20 e8       	ldi	r18, 0x80	; 128
 2c6:	40 e4       	ldi	r20, 0x40	; 64
 2c8:	60 e6       	ldi	r22, 0x60	; 96
 2ca:	76 e0       	ldi	r23, 0x06	; 6
 2cc:	80 eb       	ldi	r24, 0xB0	; 176
 2ce:	99 e0       	ldi	r25, 0x09	; 9
 2d0:	0e 94 98 03 	call	0x730	; 0x730 <tp_new>
 2d4:	80 93 0a 20 	sts	0x200A, r24	; 0x80200a <tp4>
 2d8:	90 93 0b 20 	sts	0x200B, r25	; 0x80200b <tp4+0x1>
 2dc:	0e 94 cf 03 	call	0x79e	; 0x79e <tp_init>
 2e0:	e0 ea       	ldi	r30, 0xA0	; 160
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	82 81       	ldd	r24, Z+2	; 0x02
 2e6:	87 60       	ori	r24, 0x07	; 7
 2e8:	82 83       	std	Z+2, r24	; 0x02
 2ea:	78 94       	sei
 2ec:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <tp1>
 2f0:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <tp1+0x1>
 2f4:	0e 94 05 04 	call	0x80a	; 0x80a <tp_statflash>
 2f8:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <tp3>
 2fc:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <tp3+0x1>
 300:	0e 94 05 04 	call	0x80a	; 0x80a <tp_statflash>
 304:	2f e7       	ldi	r18, 0x7F	; 127
 306:	8a e1       	ldi	r24, 0x1A	; 26
 308:	96 e0       	ldi	r25, 0x06	; 6
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	80 40       	sbci	r24, 0x00	; 0
 30e:	90 40       	sbci	r25, 0x00	; 0
 310:	e1 f7       	brne	.-8      	; 0x30a <main+0xbe>
 312:	00 c0       	rjmp	.+0      	; 0x314 <main+0xc8>
 314:	00 00       	nop
 316:	ea cf       	rjmp	.-44     	; 0x2ec <main+0xa0>

00000318 <handoff>:
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	1f 92       	push	r1
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
 322:	be 01       	movw	r22, r28
 324:	6f 5f       	subi	r22, 0xFF	; 255
 326:	7f 4f       	sbci	r23, 0xFF	; 255
 328:	0e 94 37 04 	call	0x86e	; 0x86e <tp_read>
 32c:	69 81       	ldd	r22, Y+1	; 0x01
 32e:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <tp4>
 332:	90 91 0b 20 	lds	r25, 0x200B	; 0x80200b <tp4+0x1>
 336:	0e 94 76 04 	call	0x8ec	; 0x8ec <tp_write>
 33a:	2f e7       	ldi	r18, 0x7F	; 127
 33c:	8a e1       	ldi	r24, 0x1A	; 26
 33e:	96 e0       	ldi	r25, 0x06	; 6
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <handoff+0x28>
 348:	00 c0       	rjmp	.+0      	; 0x34a <handoff+0x32>
 34a:	00 00       	nop
 34c:	0f 90       	pop	r0
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <__vector_25>:
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	08 b6       	in	r0, 0x38	; 56
 360:	0f 92       	push	r0
 362:	18 be       	out	0x38, r1	; 56
 364:	09 b6       	in	r0, 0x39	; 57
 366:	0f 92       	push	r0
 368:	19 be       	out	0x39, r1	; 57
 36a:	0b b6       	in	r0, 0x3b	; 59
 36c:	0f 92       	push	r0
 36e:	1b be       	out	0x3b, r1	; 59
 370:	2f 93       	push	r18
 372:	3f 93       	push	r19
 374:	4f 93       	push	r20
 376:	5f 93       	push	r21
 378:	6f 93       	push	r22
 37a:	7f 93       	push	r23
 37c:	8f 93       	push	r24
 37e:	9f 93       	push	r25
 380:	af 93       	push	r26
 382:	bf 93       	push	r27
 384:	ef 93       	push	r30
 386:	ff 93       	push	r31
 388:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <tp1>
 38c:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <tp1+0x1>
 390:	0e 94 0e 04 	call	0x81c	; 0x81c <tp_rxISR>
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	7f 91       	pop	r23
 3a2:	6f 91       	pop	r22
 3a4:	5f 91       	pop	r21
 3a6:	4f 91       	pop	r20
 3a8:	3f 91       	pop	r19
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0b be       	out	0x3b, r0	; 59
 3b0:	0f 90       	pop	r0
 3b2:	09 be       	out	0x39, r0	; 57
 3b4:	0f 90       	pop	r0
 3b6:	08 be       	out	0x38, r0	; 56
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <__vector_26>:
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	08 b6       	in	r0, 0x38	; 56
 3ce:	0f 92       	push	r0
 3d0:	18 be       	out	0x38, r1	; 56
 3d2:	09 b6       	in	r0, 0x39	; 57
 3d4:	0f 92       	push	r0
 3d6:	19 be       	out	0x39, r1	; 57
 3d8:	0b b6       	in	r0, 0x3b	; 59
 3da:	0f 92       	push	r0
 3dc:	1b be       	out	0x3b, r1	; 59
 3de:	2f 93       	push	r18
 3e0:	3f 93       	push	r19
 3e2:	4f 93       	push	r20
 3e4:	5f 93       	push	r21
 3e6:	6f 93       	push	r22
 3e8:	7f 93       	push	r23
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	af 93       	push	r26
 3f0:	bf 93       	push	r27
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
 3f6:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <tp1>
 3fa:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <tp1+0x1>
 3fe:	0e 94 56 04 	call	0x8ac	; 0x8ac <tp_txISR>
 402:	ff 91       	pop	r31
 404:	ef 91       	pop	r30
 406:	bf 91       	pop	r27
 408:	af 91       	pop	r26
 40a:	9f 91       	pop	r25
 40c:	8f 91       	pop	r24
 40e:	7f 91       	pop	r23
 410:	6f 91       	pop	r22
 412:	5f 91       	pop	r21
 414:	4f 91       	pop	r20
 416:	3f 91       	pop	r19
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	0b be       	out	0x3b, r0	; 59
 41e:	0f 90       	pop	r0
 420:	09 be       	out	0x39, r0	; 57
 422:	0f 90       	pop	r0
 424:	08 be       	out	0x38, r0	; 56
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <__vector_28>:
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	08 b6       	in	r0, 0x38	; 56
 43c:	0f 92       	push	r0
 43e:	18 be       	out	0x38, r1	; 56
 440:	09 b6       	in	r0, 0x39	; 57
 442:	0f 92       	push	r0
 444:	19 be       	out	0x39, r1	; 57
 446:	0b b6       	in	r0, 0x3b	; 59
 448:	0f 92       	push	r0
 44a:	1b be       	out	0x3b, r1	; 59
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	7f 93       	push	r23
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	af 93       	push	r26
 45e:	bf 93       	push	r27
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
 464:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 468:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
 46c:	0e 94 0e 04 	call	0x81c	; 0x81c <tp_rxISR>
 470:	ff 91       	pop	r31
 472:	ef 91       	pop	r30
 474:	bf 91       	pop	r27
 476:	af 91       	pop	r26
 478:	9f 91       	pop	r25
 47a:	8f 91       	pop	r24
 47c:	7f 91       	pop	r23
 47e:	6f 91       	pop	r22
 480:	5f 91       	pop	r21
 482:	4f 91       	pop	r20
 484:	3f 91       	pop	r19
 486:	2f 91       	pop	r18
 488:	0f 90       	pop	r0
 48a:	0b be       	out	0x3b, r0	; 59
 48c:	0f 90       	pop	r0
 48e:	09 be       	out	0x39, r0	; 57
 490:	0f 90       	pop	r0
 492:	08 be       	out	0x38, r0	; 56
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <__vector_29>:
 49e:	1f 92       	push	r1
 4a0:	0f 92       	push	r0
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	0f 92       	push	r0
 4a6:	11 24       	eor	r1, r1
 4a8:	08 b6       	in	r0, 0x38	; 56
 4aa:	0f 92       	push	r0
 4ac:	18 be       	out	0x38, r1	; 56
 4ae:	09 b6       	in	r0, 0x39	; 57
 4b0:	0f 92       	push	r0
 4b2:	19 be       	out	0x39, r1	; 57
 4b4:	0b b6       	in	r0, 0x3b	; 59
 4b6:	0f 92       	push	r0
 4b8:	1b be       	out	0x3b, r1	; 59
 4ba:	2f 93       	push	r18
 4bc:	3f 93       	push	r19
 4be:	4f 93       	push	r20
 4c0:	5f 93       	push	r21
 4c2:	6f 93       	push	r22
 4c4:	7f 93       	push	r23
 4c6:	8f 93       	push	r24
 4c8:	9f 93       	push	r25
 4ca:	af 93       	push	r26
 4cc:	bf 93       	push	r27
 4ce:	ef 93       	push	r30
 4d0:	ff 93       	push	r31
 4d2:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <__data_end>
 4d6:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <__data_end+0x1>
 4da:	0e 94 56 04 	call	0x8ac	; 0x8ac <tp_txISR>
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	bf 91       	pop	r27
 4e4:	af 91       	pop	r26
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	7f 91       	pop	r23
 4ec:	6f 91       	pop	r22
 4ee:	5f 91       	pop	r21
 4f0:	4f 91       	pop	r20
 4f2:	3f 91       	pop	r19
 4f4:	2f 91       	pop	r18
 4f6:	0f 90       	pop	r0
 4f8:	0b be       	out	0x3b, r0	; 59
 4fa:	0f 90       	pop	r0
 4fc:	09 be       	out	0x39, r0	; 57
 4fe:	0f 90       	pop	r0
 500:	08 be       	out	0x38, r0	; 56
 502:	0f 90       	pop	r0
 504:	0f be       	out	0x3f, r0	; 63
 506:	0f 90       	pop	r0
 508:	1f 90       	pop	r1
 50a:	18 95       	reti

0000050c <__vector_88>:
 50c:	1f 92       	push	r1
 50e:	0f 92       	push	r0
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	0f 92       	push	r0
 514:	11 24       	eor	r1, r1
 516:	08 b6       	in	r0, 0x38	; 56
 518:	0f 92       	push	r0
 51a:	18 be       	out	0x38, r1	; 56
 51c:	09 b6       	in	r0, 0x39	; 57
 51e:	0f 92       	push	r0
 520:	19 be       	out	0x39, r1	; 57
 522:	0b b6       	in	r0, 0x3b	; 59
 524:	0f 92       	push	r0
 526:	1b be       	out	0x3b, r1	; 59
 528:	2f 93       	push	r18
 52a:	3f 93       	push	r19
 52c:	4f 93       	push	r20
 52e:	5f 93       	push	r21
 530:	6f 93       	push	r22
 532:	7f 93       	push	r23
 534:	8f 93       	push	r24
 536:	9f 93       	push	r25
 538:	af 93       	push	r26
 53a:	bf 93       	push	r27
 53c:	ef 93       	push	r30
 53e:	ff 93       	push	r31
 540:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <tp3>
 544:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <tp3+0x1>
 548:	0e 94 0e 04 	call	0x81c	; 0x81c <tp_rxISR>
 54c:	ff 91       	pop	r31
 54e:	ef 91       	pop	r30
 550:	bf 91       	pop	r27
 552:	af 91       	pop	r26
 554:	9f 91       	pop	r25
 556:	8f 91       	pop	r24
 558:	7f 91       	pop	r23
 55a:	6f 91       	pop	r22
 55c:	5f 91       	pop	r21
 55e:	4f 91       	pop	r20
 560:	3f 91       	pop	r19
 562:	2f 91       	pop	r18
 564:	0f 90       	pop	r0
 566:	0b be       	out	0x3b, r0	; 59
 568:	0f 90       	pop	r0
 56a:	09 be       	out	0x39, r0	; 57
 56c:	0f 90       	pop	r0
 56e:	08 be       	out	0x38, r0	; 56
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <__vector_89>:
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	08 b6       	in	r0, 0x38	; 56
 586:	0f 92       	push	r0
 588:	18 be       	out	0x38, r1	; 56
 58a:	09 b6       	in	r0, 0x39	; 57
 58c:	0f 92       	push	r0
 58e:	19 be       	out	0x39, r1	; 57
 590:	0b b6       	in	r0, 0x3b	; 59
 592:	0f 92       	push	r0
 594:	1b be       	out	0x3b, r1	; 59
 596:	2f 93       	push	r18
 598:	3f 93       	push	r19
 59a:	4f 93       	push	r20
 59c:	5f 93       	push	r21
 59e:	6f 93       	push	r22
 5a0:	7f 93       	push	r23
 5a2:	8f 93       	push	r24
 5a4:	9f 93       	push	r25
 5a6:	af 93       	push	r26
 5a8:	bf 93       	push	r27
 5aa:	ef 93       	push	r30
 5ac:	ff 93       	push	r31
 5ae:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <tp3>
 5b2:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <tp3+0x1>
 5b6:	0e 94 56 04 	call	0x8ac	; 0x8ac <tp_txISR>
 5ba:	ff 91       	pop	r31
 5bc:	ef 91       	pop	r30
 5be:	bf 91       	pop	r27
 5c0:	af 91       	pop	r26
 5c2:	9f 91       	pop	r25
 5c4:	8f 91       	pop	r24
 5c6:	7f 91       	pop	r23
 5c8:	6f 91       	pop	r22
 5ca:	5f 91       	pop	r21
 5cc:	4f 91       	pop	r20
 5ce:	3f 91       	pop	r19
 5d0:	2f 91       	pop	r18
 5d2:	0f 90       	pop	r0
 5d4:	0b be       	out	0x3b, r0	; 59
 5d6:	0f 90       	pop	r0
 5d8:	09 be       	out	0x39, r0	; 57
 5da:	0f 90       	pop	r0
 5dc:	08 be       	out	0x38, r0	; 56
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <__vector_92>:

ISR(USARTD1_DRE_vect){
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	08 b6       	in	r0, 0x38	; 56
 5f4:	0f 92       	push	r0
 5f6:	18 be       	out	0x38, r1	; 56
 5f8:	09 b6       	in	r0, 0x39	; 57
 5fa:	0f 92       	push	r0
 5fc:	19 be       	out	0x39, r1	; 57
 5fe:	0b b6       	in	r0, 0x3b	; 59
 600:	0f 92       	push	r0
 602:	1b be       	out	0x3b, r1	; 59
 604:	2f 93       	push	r18
 606:	3f 93       	push	r19
 608:	4f 93       	push	r20
 60a:	5f 93       	push	r21
 60c:	6f 93       	push	r22
 60e:	7f 93       	push	r23
 610:	8f 93       	push	r24
 612:	9f 93       	push	r25
 614:	af 93       	push	r26
 616:	bf 93       	push	r27
 618:	ef 93       	push	r30
 61a:	ff 93       	push	r31
	tp_txISR(tp4);
 61c:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <tp4>
 620:	90 91 0b 20 	lds	r25, 0x200B	; 0x80200b <tp4+0x1>
 624:	0e 94 56 04 	call	0x8ac	; 0x8ac <tp_txISR>
 628:	ff 91       	pop	r31
 62a:	ef 91       	pop	r30
 62c:	bf 91       	pop	r27
 62e:	af 91       	pop	r26
 630:	9f 91       	pop	r25
 632:	8f 91       	pop	r24
 634:	7f 91       	pop	r23
 636:	6f 91       	pop	r22
 638:	5f 91       	pop	r21
 63a:	4f 91       	pop	r20
 63c:	3f 91       	pop	r19
 63e:	2f 91       	pop	r18
 640:	0f 90       	pop	r0
 642:	0b be       	out	0x3b, r0	; 59
 644:	0f 90       	pop	r0
 646:	09 be       	out	0x39, r0	; 57
 648:	0f 90       	pop	r0
 64a:	08 be       	out	0x38, r0	; 56
 64c:	0f 90       	pop	r0
 64e:	0f be       	out	0x3f, r0	; 63
 650:	0f 90       	pop	r0
 652:	1f 90       	pop	r1
 654:	18 95       	reti

00000656 <rb_new>:
	return rb;
}

void rb_reset(ringbuffer_t rb){
	rb->head = 0;
	rb->tail = 0;
 656:	cf 92       	push	r12
 658:	df 92       	push	r13
 65a:	ef 92       	push	r14
 65c:	ff 92       	push	r15
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	6b 01       	movw	r12, r22
 664:	7c 01       	movw	r14, r24
 666:	88 e0       	ldi	r24, 0x08	; 8
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 84 04 	call	0x908	; 0x908 <malloc>
 66e:	ec 01       	movw	r28, r24
 670:	89 2b       	or	r24, r25
 672:	d1 f0       	breq	.+52     	; 0x6a8 <rb_new+0x52>
 674:	d7 01       	movw	r26, r14
 676:	c6 01       	movw	r24, r12
 678:	01 96       	adiw	r24, 0x01	; 1
 67a:	a1 1d       	adc	r26, r1
 67c:	b1 1d       	adc	r27, r1
 67e:	8c 83       	std	Y+4, r24	; 0x04
 680:	9d 83       	std	Y+5, r25	; 0x05
 682:	ae 83       	std	Y+6, r26	; 0x06
 684:	bf 83       	std	Y+7, r27	; 0x07
 686:	0e 94 84 04 	call	0x908	; 0x908 <malloc>
 68a:	88 83       	st	Y, r24
 68c:	99 83       	std	Y+1, r25	; 0x01
 68e:	89 2b       	or	r24, r25
 690:	29 f0       	breq	.+10     	; 0x69c <rb_new+0x46>
 692:	1a 82       	std	Y+2, r1	; 0x02
 694:	1b 82       	std	Y+3, r1	; 0x03
 696:	8c 2f       	mov	r24, r28
 698:	9d 2f       	mov	r25, r29
 69a:	08 c0       	rjmp	.+16     	; 0x6ac <rb_new+0x56>
 69c:	ce 01       	movw	r24, r28
 69e:	0e 94 1c 05 	call	0xa38	; 0xa38 <free>
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <rb_new+0x56>
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	ff 90       	pop	r15
 6b2:	ef 90       	pop	r14
 6b4:	df 90       	pop	r13
 6b6:	cf 90       	pop	r12
 6b8:	08 95       	ret

000006ba <rb_write>:
}


void rb_write(ringbuffer_t rb, uint8_t data){
 6ba:	fc 01       	movw	r30, r24
	// write to head

	rb->buf[rb->head] = data;
 6bc:	82 81       	ldd	r24, Z+2	; 0x02
 6be:	a0 81       	ld	r26, Z
 6c0:	b1 81       	ldd	r27, Z+1	; 0x01
 6c2:	a8 0f       	add	r26, r24
 6c4:	b1 1d       	adc	r27, r1
 6c6:	6c 93       	st	X, r22
	
	rb->head += 1;
 6c8:	42 81       	ldd	r20, Z+2	; 0x02
 6ca:	4f 5f       	subi	r20, 0xFF	; 255
 6cc:	42 83       	std	Z+2, r20	; 0x02
	if(rb->head >= rb->size){
 6ce:	50 e0       	ldi	r21, 0x00	; 0
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	84 81       	ldd	r24, Z+4	; 0x04
 6d6:	95 81       	ldd	r25, Z+5	; 0x05
 6d8:	a6 81       	ldd	r26, Z+6	; 0x06
 6da:	b7 81       	ldd	r27, Z+7	; 0x07
 6dc:	48 17       	cp	r20, r24
 6de:	59 07       	cpc	r21, r25
 6e0:	6a 07       	cpc	r22, r26
 6e2:	7b 07       	cpc	r23, r27
 6e4:	08 f0       	brcs	.+2      	; 0x6e8 <rb_write+0x2e>
		rb->head = 0;
 6e6:	12 82       	std	Z+2, r1	; 0x02
 6e8:	08 95       	ret

000006ea <rb_read>:
	}
	// increment head and check wrap
}

uint8_t rb_read(ringbuffer_t rb){
 6ea:	0f 93       	push	r16
 6ec:	1f 93       	push	r17
 6ee:	fc 01       	movw	r30, r24
	// pull data from tail
	uint8_t data = rb->buf[rb->tail];
 6f0:	43 81       	ldd	r20, Z+3	; 0x03
 6f2:	a0 81       	ld	r26, Z
 6f4:	b1 81       	ldd	r27, Z+1	; 0x01
 6f6:	a4 0f       	add	r26, r20
 6f8:	b1 1d       	adc	r27, r1
 6fa:	8c 91       	ld	r24, X
	// increment tail and check wrap
	rb->tail += 1;
 6fc:	4f 5f       	subi	r20, 0xFF	; 255
 6fe:	43 83       	std	Z+3, r20	; 0x03
	if(rb->tail >= rb->size){
 700:	50 e0       	ldi	r21, 0x00	; 0
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	70 e0       	ldi	r23, 0x00	; 0
 706:	04 81       	ldd	r16, Z+4	; 0x04
 708:	15 81       	ldd	r17, Z+5	; 0x05
 70a:	26 81       	ldd	r18, Z+6	; 0x06
 70c:	37 81       	ldd	r19, Z+7	; 0x07
 70e:	40 17       	cp	r20, r16
 710:	51 07       	cpc	r21, r17
 712:	62 07       	cpc	r22, r18
 714:	73 07       	cpc	r23, r19
 716:	08 f0       	brcs	.+2      	; 0x71a <rb_read+0x30>
		rb->tail = 0;
 718:	13 82       	std	Z+3, r1	; 0x03
	}
	return data;
}
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	08 95       	ret

00000720 <rb_hasdata>:

uint8_t rb_hasdata(ringbuffer_t rb){
 720:	fc 01       	movw	r30, r24
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	23 81       	ldd	r18, Z+3	; 0x03
 726:	92 81       	ldd	r25, Z+2	; 0x02
 728:	29 13       	cpse	r18, r25
 72a:	01 c0       	rjmp	.+2      	; 0x72e <rb_hasdata+0xe>
 72c:	80 e0       	ldi	r24, 0x00	; 0
	if (rb->tail == rb->head){
		return 0;
	} else {
		return 1;
	}
 72e:	08 95       	ret

00000730 <tp_new>:
void tp_setRxStatus(tinyport_t tp, uint8_t state){
	if(state == tp->rxstate){
		// nothing
		// nothing changes? always listening
	} else {
		tp->rxstate = state;
 730:	af 92       	push	r10
 732:	bf 92       	push	r11
 734:	cf 92       	push	r12
 736:	df 92       	push	r13
 738:	ff 92       	push	r15
 73a:	0f 93       	push	r16
 73c:	1f 93       	push	r17
 73e:	cf 93       	push	r28
 740:	df 93       	push	r29
 742:	5c 01       	movw	r10, r24
 744:	6b 01       	movw	r12, r22
 746:	f4 2e       	mov	r15, r20
 748:	12 2f       	mov	r17, r18
 74a:	8e e0       	ldi	r24, 0x0E	; 14
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 84 04 	call	0x908	; 0x908 <malloc>
 752:	ec 01       	movw	r28, r24
 754:	a8 82       	st	Y, r10
 756:	b9 82       	std	Y+1, r11	; 0x01
 758:	ca 82       	std	Y+2, r12	; 0x02
 75a:	db 82       	std	Y+3, r13	; 0x03
 75c:	fc 82       	std	Y+4, r15	; 0x04
 75e:	1d 83       	std	Y+5, r17	; 0x05
 760:	0e 83       	std	Y+6, r16	; 0x06
 762:	60 e1       	ldi	r22, 0x10	; 16
 764:	70 e0       	ldi	r23, 0x00	; 0
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 2b 03 	call	0x656	; 0x656 <rb_new>
 76e:	8f 83       	std	Y+7, r24	; 0x07
 770:	98 87       	std	Y+8, r25	; 0x08
 772:	60 e1       	ldi	r22, 0x10	; 16
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 2b 03 	call	0x656	; 0x656 <rb_new>
 77e:	89 87       	std	Y+9, r24	; 0x09
 780:	9a 87       	std	Y+10, r25	; 0x0a
 782:	1b 86       	std	Y+11, r1	; 0x0b
 784:	1c 86       	std	Y+12, r1	; 0x0c
 786:	1d 86       	std	Y+13, r1	; 0x0d
 788:	ce 01       	movw	r24, r28
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	1f 91       	pop	r17
 790:	0f 91       	pop	r16
 792:	ff 90       	pop	r15
 794:	df 90       	pop	r13
 796:	cf 90       	pop	r12
 798:	bf 90       	pop	r11
 79a:	af 90       	pop	r10
 79c:	08 95       	ret

0000079e <tp_init>:
 79e:	fc 01       	movw	r30, r24
 7a0:	a0 81       	ld	r26, Z
 7a2:	b1 81       	ldd	r27, Z+1	; 0x01
 7a4:	8b e9       	ldi	r24, 0x9B	; 155
 7a6:	16 96       	adiw	r26, 0x06	; 6
 7a8:	8c 93       	st	X, r24
 7aa:	a0 81       	ld	r26, Z
 7ac:	b1 81       	ldd	r27, Z+1	; 0x01
 7ae:	17 96       	adiw	r26, 0x07	; 7
 7b0:	1c 92       	st	X, r1
 7b2:	a0 81       	ld	r26, Z
 7b4:	b1 81       	ldd	r27, Z+1	; 0x01
 7b6:	13 96       	adiw	r26, 0x03	; 3
 7b8:	8c 91       	ld	r24, X
 7ba:	13 97       	sbiw	r26, 0x03	; 3
 7bc:	80 61       	ori	r24, 0x10	; 16
 7be:	13 96       	adiw	r26, 0x03	; 3
 7c0:	8c 93       	st	X, r24
 7c2:	a0 81       	ld	r26, Z
 7c4:	b1 81       	ldd	r27, Z+1	; 0x01
 7c6:	88 e1       	ldi	r24, 0x18	; 24
 7c8:	14 96       	adiw	r26, 0x04	; 4
 7ca:	8c 93       	st	X, r24
 7cc:	a0 81       	ld	r26, Z
 7ce:	b1 81       	ldd	r27, Z+1	; 0x01
 7d0:	83 e0       	ldi	r24, 0x03	; 3
 7d2:	15 96       	adiw	r26, 0x05	; 5
 7d4:	8c 93       	st	X, r24
 7d6:	a2 81       	ldd	r26, Z+2	; 0x02
 7d8:	b3 81       	ldd	r27, Z+3	; 0x03
 7da:	85 81       	ldd	r24, Z+5	; 0x05
 7dc:	15 96       	adiw	r26, 0x05	; 5
 7de:	8c 93       	st	X, r24
 7e0:	a2 81       	ldd	r26, Z+2	; 0x02
 7e2:	b3 81       	ldd	r27, Z+3	; 0x03
 7e4:	85 81       	ldd	r24, Z+5	; 0x05
 7e6:	11 96       	adiw	r26, 0x01	; 1
 7e8:	8c 93       	st	X, r24
 7ea:	a2 81       	ldd	r26, Z+2	; 0x02
 7ec:	b3 81       	ldd	r27, Z+3	; 0x03
 7ee:	84 81       	ldd	r24, Z+4	; 0x04
 7f0:	12 96       	adiw	r26, 0x02	; 2
 7f2:	8c 93       	st	X, r24
 7f4:	a2 81       	ldd	r26, Z+2	; 0x02
 7f6:	b3 81       	ldd	r27, Z+3	; 0x03
 7f8:	84 81       	ldd	r24, Z+4	; 0x04
 7fa:	16 96       	adiw	r26, 0x06	; 6
 7fc:	8c 93       	st	X, r24
 7fe:	a2 81       	ldd	r26, Z+2	; 0x02
 800:	b3 81       	ldd	r27, Z+3	; 0x03
 802:	86 81       	ldd	r24, Z+6	; 0x06
 804:	11 96       	adiw	r26, 0x01	; 1
 806:	8c 93       	st	X, r24
 808:	08 95       	ret

0000080a <tp_statflash>:
 80a:	dc 01       	movw	r26, r24
 80c:	12 96       	adiw	r26, 0x02	; 2
 80e:	ed 91       	ld	r30, X+
 810:	fc 91       	ld	r31, X
 812:	13 97       	sbiw	r26, 0x03	; 3
 814:	16 96       	adiw	r26, 0x06	; 6
 816:	8c 91       	ld	r24, X
 818:	87 83       	std	Z+7, r24	; 0x07
 81a:	08 95       	ret

0000081c <tp_rxISR>:
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
 820:	ec 01       	movw	r28, r24
 822:	ea 81       	ldd	r30, Y+2	; 0x02
 824:	fb 81       	ldd	r31, Y+3	; 0x03
 826:	8e 81       	ldd	r24, Y+6	; 0x06
 828:	87 83       	std	Z+7, r24	; 0x07
 82a:	e8 81       	ld	r30, Y
 82c:	f9 81       	ldd	r31, Y+1	; 0x01
 82e:	90 81       	ld	r25, Z
 830:	8d 85       	ldd	r24, Y+13	; 0x0d
 832:	88 23       	and	r24, r24
 834:	19 f0       	breq	.+6      	; 0x83c <tp_rxISR+0x20>
 836:	81 30       	cpi	r24, 0x01	; 1
 838:	31 f0       	breq	.+12     	; 0x846 <tp_rxISR+0x2a>
 83a:	11 c0       	rjmp	.+34     	; 0x85e <tp_rxISR+0x42>
 83c:	9e 37       	cpi	r25, 0x7E	; 126
 83e:	79 f4       	brne	.+30     	; 0x85e <tp_rxISR+0x42>
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	8d 87       	std	Y+13, r24	; 0x0d
 844:	0c c0       	rjmp	.+24     	; 0x85e <tp_rxISR+0x42>
 846:	9e 37       	cpi	r25, 0x7E	; 126
 848:	29 f4       	brne	.+10     	; 0x854 <tp_rxISR+0x38>
 84a:	1d 86       	std	Y+13, r1	; 0x0d
 84c:	ce 01       	movw	r24, r28
 84e:	0e 94 8c 01 	call	0x318	; 0x318 <handoff>
 852:	05 c0       	rjmp	.+10     	; 0x85e <tp_rxISR+0x42>
 854:	60 81       	ld	r22, Z
 856:	8f 81       	ldd	r24, Y+7	; 0x07
 858:	98 85       	ldd	r25, Y+8	; 0x08
 85a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <rb_write>
 85e:	8c 85       	ldd	r24, Y+12	; 0x0c
 860:	81 30       	cpi	r24, 0x01	; 1
 862:	11 f0       	breq	.+4      	; 0x868 <tp_rxISR+0x4c>
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	8c 87       	std	Y+12, r24	; 0x0c
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	08 95       	ret

0000086e <tp_read>:
 86e:	81 e5       	ldi	r24, 0x51	; 81
 870:	fb 01       	movw	r30, r22
 872:	80 83       	st	Z, r24
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	08 95       	ret

00000878 <tp_setTxStatus>:
void tp_write(tinyport_t tp, uint8_t data){
	rb_write(tp->rbtx, data);
	tp_setTxStatus(tp, TP_TX_STATE_TRANSMIT); // available
}

void tp_setTxStatus(tinyport_t tp, uint8_t state){
 878:	fc 01       	movw	r30, r24
	if(state == tp->txstate){ // if already set,
 87a:	83 85       	ldd	r24, Z+11	; 0x0b
 87c:	86 17       	cp	r24, r22
 87e:	a9 f0       	breq	.+42     	; 0x8aa <tp_setTxStatus+0x32>
		// do nothing
	} else if(state) { // if set to hi - have things to tx
 880:	66 23       	and	r22, r22
 882:	51 f0       	breq	.+20     	; 0x898 <tp_setTxStatus+0x20>
		tp->uart->CTRLA |= USART_DREINTLVL_LO_gc; // now ready for out transmit - this would happen elsewhere - when there is tx to tx
 884:	a0 81       	ld	r26, Z
 886:	b1 81       	ldd	r27, Z+1	; 0x01
 888:	13 96       	adiw	r26, 0x03	; 3
 88a:	8c 91       	ld	r24, X
 88c:	13 97       	sbiw	r26, 0x03	; 3
 88e:	81 60       	ori	r24, 0x01	; 1
 890:	13 96       	adiw	r26, 0x03	; 3
 892:	8c 93       	st	X, r24
		tp->txstate = state;
 894:	63 87       	std	Z+11, r22	; 0x0b
 896:	08 95       	ret
	} else { // if lo - buffer is empty, donot tx
		tp->uart->CTRLA = (tp->uart->CTRLA & ~ USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc; // turn off interrupt
 898:	a0 81       	ld	r26, Z
 89a:	b1 81       	ldd	r27, Z+1	; 0x01
 89c:	13 96       	adiw	r26, 0x03	; 3
 89e:	8c 91       	ld	r24, X
 8a0:	13 97       	sbiw	r26, 0x03	; 3
 8a2:	8c 7f       	andi	r24, 0xFC	; 252
 8a4:	13 96       	adiw	r26, 0x03	; 3
 8a6:	8c 93       	st	X, r24
		tp->txstate = state;
 8a8:	13 86       	std	Z+11, r1	; 0x0b
 8aa:	08 95       	ret

000008ac <tp_txISR>:
	}
}

// https://lost-contact.mit.edu/afs/sur5r.net/service/drivers+doc/Atmel/ATXMEGA/AVR1307/code/doxygen/usart__driver_8c.html#7fdb922f6b858bef8515e23229efd970

void tp_txISR(tinyport_t tp){
 8ac:	0f 93       	push	r16
 8ae:	1f 93       	push	r17
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
 8b4:	ec 01       	movw	r28, r24
	// stat pin
	tp->port->DIRSET = tp->pinSTAT_bm;
}

void tp_statflash(tinyport_t tp){
	tp->port->OUTTGL = tp->pinSTAT_bm;
 8b6:	ea 81       	ldd	r30, Y+2	; 0x02
 8b8:	fb 81       	ldd	r31, Y+3	; 0x03
 8ba:	8e 81       	ldd	r24, Y+6	; 0x06
 8bc:	87 83       	std	Z+7, r24	; 0x07

// https://lost-contact.mit.edu/afs/sur5r.net/service/drivers+doc/Atmel/ATXMEGA/AVR1307/code/doxygen/usart__driver_8c.html#7fdb922f6b858bef8515e23229efd970

void tp_txISR(tinyport_t tp){
	tp_statflash(tp);
	tp->uart->DATA = rb_read(tp->rbtx);
 8be:	08 81       	ld	r16, Y
 8c0:	19 81       	ldd	r17, Y+1	; 0x01
 8c2:	89 85       	ldd	r24, Y+9	; 0x09
 8c4:	9a 85       	ldd	r25, Y+10	; 0x0a
 8c6:	0e 94 75 03 	call	0x6ea	; 0x6ea <rb_read>
 8ca:	f8 01       	movw	r30, r16
 8cc:	80 83       	st	Z, r24
	if(!(rb_hasdata(tp->rbtx))){  // if no data left to tx,
 8ce:	89 85       	ldd	r24, Y+9	; 0x09
 8d0:	9a 85       	ldd	r25, Y+10	; 0x0a
 8d2:	0e 94 90 03 	call	0x720	; 0x720 <rb_hasdata>
 8d6:	81 11       	cpse	r24, r1
 8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <tp_txISR+0x36>
		tp_setTxStatus(tp, TP_TX_STATE_EMPTY);
 8da:	60 e0       	ldi	r22, 0x00	; 0
 8dc:	ce 01       	movw	r24, r28
 8de:	0e 94 3c 04 	call	0x878	; 0x878 <tp_setTxStatus>
	}
}
 8e2:	df 91       	pop	r29
 8e4:	cf 91       	pop	r28
 8e6:	1f 91       	pop	r17
 8e8:	0f 91       	pop	r16
 8ea:	08 95       	ret

000008ec <tp_write>:

void tp_write(tinyport_t tp, uint8_t data){
 8ec:	cf 93       	push	r28
 8ee:	df 93       	push	r29
 8f0:	ec 01       	movw	r28, r24
	rb_write(tp->rbtx, data);
 8f2:	89 85       	ldd	r24, Y+9	; 0x09
 8f4:	9a 85       	ldd	r25, Y+10	; 0x0a
 8f6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <rb_write>
	tp_setTxStatus(tp, TP_TX_STATE_TRANSMIT); // available
 8fa:	61 e0       	ldi	r22, 0x01	; 1
 8fc:	ce 01       	movw	r24, r28
 8fe:	0e 94 3c 04 	call	0x878	; 0x878 <tp_setTxStatus>
}
 902:	df 91       	pop	r29
 904:	cf 91       	pop	r28
 906:	08 95       	ret

00000908 <malloc>:
 908:	0f 93       	push	r16
 90a:	1f 93       	push	r17
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	82 30       	cpi	r24, 0x02	; 2
 912:	91 05       	cpc	r25, r1
 914:	10 f4       	brcc	.+4      	; 0x91a <malloc+0x12>
 916:	82 e0       	ldi	r24, 0x02	; 2
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <__flp>
 91e:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <__flp+0x1>
 922:	20 e0       	ldi	r18, 0x00	; 0
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	a0 e0       	ldi	r26, 0x00	; 0
 928:	b0 e0       	ldi	r27, 0x00	; 0
 92a:	30 97       	sbiw	r30, 0x00	; 0
 92c:	19 f1       	breq	.+70     	; 0x974 <malloc+0x6c>
 92e:	40 81       	ld	r20, Z
 930:	51 81       	ldd	r21, Z+1	; 0x01
 932:	02 81       	ldd	r16, Z+2	; 0x02
 934:	13 81       	ldd	r17, Z+3	; 0x03
 936:	48 17       	cp	r20, r24
 938:	59 07       	cpc	r21, r25
 93a:	c8 f0       	brcs	.+50     	; 0x96e <malloc+0x66>
 93c:	84 17       	cp	r24, r20
 93e:	95 07       	cpc	r25, r21
 940:	69 f4       	brne	.+26     	; 0x95c <malloc+0x54>
 942:	10 97       	sbiw	r26, 0x00	; 0
 944:	31 f0       	breq	.+12     	; 0x952 <malloc+0x4a>
 946:	12 96       	adiw	r26, 0x02	; 2
 948:	0c 93       	st	X, r16
 94a:	12 97       	sbiw	r26, 0x02	; 2
 94c:	13 96       	adiw	r26, 0x03	; 3
 94e:	1c 93       	st	X, r17
 950:	27 c0       	rjmp	.+78     	; 0x9a0 <malloc+0x98>
 952:	00 93 10 20 	sts	0x2010, r16	; 0x802010 <__flp>
 956:	10 93 11 20 	sts	0x2011, r17	; 0x802011 <__flp+0x1>
 95a:	22 c0       	rjmp	.+68     	; 0x9a0 <malloc+0x98>
 95c:	21 15       	cp	r18, r1
 95e:	31 05       	cpc	r19, r1
 960:	19 f0       	breq	.+6      	; 0x968 <malloc+0x60>
 962:	42 17       	cp	r20, r18
 964:	53 07       	cpc	r21, r19
 966:	18 f4       	brcc	.+6      	; 0x96e <malloc+0x66>
 968:	9a 01       	movw	r18, r20
 96a:	bd 01       	movw	r22, r26
 96c:	ef 01       	movw	r28, r30
 96e:	df 01       	movw	r26, r30
 970:	f8 01       	movw	r30, r16
 972:	db cf       	rjmp	.-74     	; 0x92a <malloc+0x22>
 974:	21 15       	cp	r18, r1
 976:	31 05       	cpc	r19, r1
 978:	f9 f0       	breq	.+62     	; 0x9b8 <malloc+0xb0>
 97a:	28 1b       	sub	r18, r24
 97c:	39 0b       	sbc	r19, r25
 97e:	24 30       	cpi	r18, 0x04	; 4
 980:	31 05       	cpc	r19, r1
 982:	80 f4       	brcc	.+32     	; 0x9a4 <malloc+0x9c>
 984:	8a 81       	ldd	r24, Y+2	; 0x02
 986:	9b 81       	ldd	r25, Y+3	; 0x03
 988:	61 15       	cp	r22, r1
 98a:	71 05       	cpc	r23, r1
 98c:	21 f0       	breq	.+8      	; 0x996 <malloc+0x8e>
 98e:	fb 01       	movw	r30, r22
 990:	82 83       	std	Z+2, r24	; 0x02
 992:	93 83       	std	Z+3, r25	; 0x03
 994:	04 c0       	rjmp	.+8      	; 0x99e <malloc+0x96>
 996:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <__flp>
 99a:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <__flp+0x1>
 99e:	fe 01       	movw	r30, r28
 9a0:	32 96       	adiw	r30, 0x02	; 2
 9a2:	44 c0       	rjmp	.+136    	; 0xa2c <malloc+0x124>
 9a4:	fe 01       	movw	r30, r28
 9a6:	e2 0f       	add	r30, r18
 9a8:	f3 1f       	adc	r31, r19
 9aa:	81 93       	st	Z+, r24
 9ac:	91 93       	st	Z+, r25
 9ae:	22 50       	subi	r18, 0x02	; 2
 9b0:	31 09       	sbc	r19, r1
 9b2:	28 83       	st	Y, r18
 9b4:	39 83       	std	Y+1, r19	; 0x01
 9b6:	3a c0       	rjmp	.+116    	; 0xa2c <malloc+0x124>
 9b8:	20 91 0e 20 	lds	r18, 0x200E	; 0x80200e <__brkval>
 9bc:	30 91 0f 20 	lds	r19, 0x200F	; 0x80200f <__brkval+0x1>
 9c0:	23 2b       	or	r18, r19
 9c2:	41 f4       	brne	.+16     	; 0x9d4 <malloc+0xcc>
 9c4:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
 9c8:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
 9cc:	20 93 0e 20 	sts	0x200E, r18	; 0x80200e <__brkval>
 9d0:	30 93 0f 20 	sts	0x200F, r19	; 0x80200f <__brkval+0x1>
 9d4:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
 9d8:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
 9dc:	21 15       	cp	r18, r1
 9de:	31 05       	cpc	r19, r1
 9e0:	41 f4       	brne	.+16     	; 0x9f2 <malloc+0xea>
 9e2:	2d b7       	in	r18, 0x3d	; 61
 9e4:	3e b7       	in	r19, 0x3e	; 62
 9e6:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
 9ea:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
 9ee:	24 1b       	sub	r18, r20
 9f0:	35 0b       	sbc	r19, r21
 9f2:	e0 91 0e 20 	lds	r30, 0x200E	; 0x80200e <__brkval>
 9f6:	f0 91 0f 20 	lds	r31, 0x200F	; 0x80200f <__brkval+0x1>
 9fa:	e2 17       	cp	r30, r18
 9fc:	f3 07       	cpc	r31, r19
 9fe:	a0 f4       	brcc	.+40     	; 0xa28 <malloc+0x120>
 a00:	2e 1b       	sub	r18, r30
 a02:	3f 0b       	sbc	r19, r31
 a04:	28 17       	cp	r18, r24
 a06:	39 07       	cpc	r19, r25
 a08:	78 f0       	brcs	.+30     	; 0xa28 <malloc+0x120>
 a0a:	ac 01       	movw	r20, r24
 a0c:	4e 5f       	subi	r20, 0xFE	; 254
 a0e:	5f 4f       	sbci	r21, 0xFF	; 255
 a10:	24 17       	cp	r18, r20
 a12:	35 07       	cpc	r19, r21
 a14:	48 f0       	brcs	.+18     	; 0xa28 <malloc+0x120>
 a16:	4e 0f       	add	r20, r30
 a18:	5f 1f       	adc	r21, r31
 a1a:	40 93 0e 20 	sts	0x200E, r20	; 0x80200e <__brkval>
 a1e:	50 93 0f 20 	sts	0x200F, r21	; 0x80200f <__brkval+0x1>
 a22:	81 93       	st	Z+, r24
 a24:	91 93       	st	Z+, r25
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <malloc+0x124>
 a28:	e0 e0       	ldi	r30, 0x00	; 0
 a2a:	f0 e0       	ldi	r31, 0x00	; 0
 a2c:	cf 01       	movw	r24, r30
 a2e:	df 91       	pop	r29
 a30:	cf 91       	pop	r28
 a32:	1f 91       	pop	r17
 a34:	0f 91       	pop	r16
 a36:	08 95       	ret

00000a38 <free>:
 a38:	cf 93       	push	r28
 a3a:	df 93       	push	r29
 a3c:	00 97       	sbiw	r24, 0x00	; 0
 a3e:	09 f4       	brne	.+2      	; 0xa42 <free+0xa>
 a40:	81 c0       	rjmp	.+258    	; 0xb44 <free+0x10c>
 a42:	fc 01       	movw	r30, r24
 a44:	32 97       	sbiw	r30, 0x02	; 2
 a46:	12 82       	std	Z+2, r1	; 0x02
 a48:	13 82       	std	Z+3, r1	; 0x03
 a4a:	a0 91 10 20 	lds	r26, 0x2010	; 0x802010 <__flp>
 a4e:	b0 91 11 20 	lds	r27, 0x2011	; 0x802011 <__flp+0x1>
 a52:	10 97       	sbiw	r26, 0x00	; 0
 a54:	81 f4       	brne	.+32     	; 0xa76 <free+0x3e>
 a56:	20 81       	ld	r18, Z
 a58:	31 81       	ldd	r19, Z+1	; 0x01
 a5a:	82 0f       	add	r24, r18
 a5c:	93 1f       	adc	r25, r19
 a5e:	20 91 0e 20 	lds	r18, 0x200E	; 0x80200e <__brkval>
 a62:	30 91 0f 20 	lds	r19, 0x200F	; 0x80200f <__brkval+0x1>
 a66:	28 17       	cp	r18, r24
 a68:	39 07       	cpc	r19, r25
 a6a:	51 f5       	brne	.+84     	; 0xac0 <free+0x88>
 a6c:	e0 93 0e 20 	sts	0x200E, r30	; 0x80200e <__brkval>
 a70:	f0 93 0f 20 	sts	0x200F, r31	; 0x80200f <__brkval+0x1>
 a74:	67 c0       	rjmp	.+206    	; 0xb44 <free+0x10c>
 a76:	ed 01       	movw	r28, r26
 a78:	20 e0       	ldi	r18, 0x00	; 0
 a7a:	30 e0       	ldi	r19, 0x00	; 0
 a7c:	ce 17       	cp	r28, r30
 a7e:	df 07       	cpc	r29, r31
 a80:	40 f4       	brcc	.+16     	; 0xa92 <free+0x5a>
 a82:	4a 81       	ldd	r20, Y+2	; 0x02
 a84:	5b 81       	ldd	r21, Y+3	; 0x03
 a86:	9e 01       	movw	r18, r28
 a88:	41 15       	cp	r20, r1
 a8a:	51 05       	cpc	r21, r1
 a8c:	f1 f0       	breq	.+60     	; 0xaca <free+0x92>
 a8e:	ea 01       	movw	r28, r20
 a90:	f5 cf       	rjmp	.-22     	; 0xa7c <free+0x44>
 a92:	c2 83       	std	Z+2, r28	; 0x02
 a94:	d3 83       	std	Z+3, r29	; 0x03
 a96:	40 81       	ld	r20, Z
 a98:	51 81       	ldd	r21, Z+1	; 0x01
 a9a:	84 0f       	add	r24, r20
 a9c:	95 1f       	adc	r25, r21
 a9e:	c8 17       	cp	r28, r24
 aa0:	d9 07       	cpc	r29, r25
 aa2:	59 f4       	brne	.+22     	; 0xaba <free+0x82>
 aa4:	88 81       	ld	r24, Y
 aa6:	99 81       	ldd	r25, Y+1	; 0x01
 aa8:	84 0f       	add	r24, r20
 aaa:	95 1f       	adc	r25, r21
 aac:	02 96       	adiw	r24, 0x02	; 2
 aae:	80 83       	st	Z, r24
 ab0:	91 83       	std	Z+1, r25	; 0x01
 ab2:	8a 81       	ldd	r24, Y+2	; 0x02
 ab4:	9b 81       	ldd	r25, Y+3	; 0x03
 ab6:	82 83       	std	Z+2, r24	; 0x02
 ab8:	93 83       	std	Z+3, r25	; 0x03
 aba:	21 15       	cp	r18, r1
 abc:	31 05       	cpc	r19, r1
 abe:	29 f4       	brne	.+10     	; 0xaca <free+0x92>
 ac0:	e0 93 10 20 	sts	0x2010, r30	; 0x802010 <__flp>
 ac4:	f0 93 11 20 	sts	0x2011, r31	; 0x802011 <__flp+0x1>
 ac8:	3d c0       	rjmp	.+122    	; 0xb44 <free+0x10c>
 aca:	e9 01       	movw	r28, r18
 acc:	ea 83       	std	Y+2, r30	; 0x02
 ace:	fb 83       	std	Y+3, r31	; 0x03
 ad0:	49 91       	ld	r20, Y+
 ad2:	59 91       	ld	r21, Y+
 ad4:	c4 0f       	add	r28, r20
 ad6:	d5 1f       	adc	r29, r21
 ad8:	ec 17       	cp	r30, r28
 ada:	fd 07       	cpc	r31, r29
 adc:	61 f4       	brne	.+24     	; 0xaf6 <free+0xbe>
 ade:	80 81       	ld	r24, Z
 ae0:	91 81       	ldd	r25, Z+1	; 0x01
 ae2:	84 0f       	add	r24, r20
 ae4:	95 1f       	adc	r25, r21
 ae6:	02 96       	adiw	r24, 0x02	; 2
 ae8:	e9 01       	movw	r28, r18
 aea:	88 83       	st	Y, r24
 aec:	99 83       	std	Y+1, r25	; 0x01
 aee:	82 81       	ldd	r24, Z+2	; 0x02
 af0:	93 81       	ldd	r25, Z+3	; 0x03
 af2:	8a 83       	std	Y+2, r24	; 0x02
 af4:	9b 83       	std	Y+3, r25	; 0x03
 af6:	e0 e0       	ldi	r30, 0x00	; 0
 af8:	f0 e0       	ldi	r31, 0x00	; 0
 afa:	12 96       	adiw	r26, 0x02	; 2
 afc:	8d 91       	ld	r24, X+
 afe:	9c 91       	ld	r25, X
 b00:	13 97       	sbiw	r26, 0x03	; 3
 b02:	00 97       	sbiw	r24, 0x00	; 0
 b04:	19 f0       	breq	.+6      	; 0xb0c <free+0xd4>
 b06:	fd 01       	movw	r30, r26
 b08:	dc 01       	movw	r26, r24
 b0a:	f7 cf       	rjmp	.-18     	; 0xafa <free+0xc2>
 b0c:	8d 91       	ld	r24, X+
 b0e:	9c 91       	ld	r25, X
 b10:	11 97       	sbiw	r26, 0x01	; 1
 b12:	9d 01       	movw	r18, r26
 b14:	2e 5f       	subi	r18, 0xFE	; 254
 b16:	3f 4f       	sbci	r19, 0xFF	; 255
 b18:	82 0f       	add	r24, r18
 b1a:	93 1f       	adc	r25, r19
 b1c:	20 91 0e 20 	lds	r18, 0x200E	; 0x80200e <__brkval>
 b20:	30 91 0f 20 	lds	r19, 0x200F	; 0x80200f <__brkval+0x1>
 b24:	28 17       	cp	r18, r24
 b26:	39 07       	cpc	r19, r25
 b28:	69 f4       	brne	.+26     	; 0xb44 <free+0x10c>
 b2a:	30 97       	sbiw	r30, 0x00	; 0
 b2c:	29 f4       	brne	.+10     	; 0xb38 <free+0x100>
 b2e:	10 92 10 20 	sts	0x2010, r1	; 0x802010 <__flp>
 b32:	10 92 11 20 	sts	0x2011, r1	; 0x802011 <__flp+0x1>
 b36:	02 c0       	rjmp	.+4      	; 0xb3c <free+0x104>
 b38:	12 82       	std	Z+2, r1	; 0x02
 b3a:	13 82       	std	Z+3, r1	; 0x03
 b3c:	a0 93 0e 20 	sts	0x200E, r26	; 0x80200e <__brkval>
 b40:	b0 93 0f 20 	sts	0x200F, r27	; 0x80200f <__brkval+0x1>
 b44:	df 91       	pop	r29
 b46:	cf 91       	pop	r28
 b48:	08 95       	ret

00000b4a <_exit>:
 b4a:	f8 94       	cli

00000b4c <__stop_program>:
 b4c:	ff cf       	rjmp	.-2      	; 0xb4c <__stop_program>
